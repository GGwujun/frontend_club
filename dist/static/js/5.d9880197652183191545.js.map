{"version":3,"sources":["webpack:///static/js/5.d9880197652183191545.js","webpack:///./src/pages/about.vue","webpack:///./~/.0.10.3@util/support/isBufferBrowser.js?f5b7*","webpack:///./~/.0.10.3@util/util.js?d64d*","webpack:///./~/.0.11.10@process/browser.js?daf4*","webpack:///./~/.0.5.0@markdown/lib/index.js?7ca5*","webpack:///./~/.0.5.0@markdown/lib/markdown.js?2e9e*","webpack:///./~/.2.0.1@inherits/inherits_browser.js?d063*","webpack:///./src/pages/about.vue?95ca","webpack:///./src/pages/about.vue?17d2","webpack:///./src/pages/about.vue?458b","webpack:///about.vue"],"names":["webpackJsonp","175","module","exports","__webpack_require__","injectStyle","ssrContext","Component","184","arg","copy","fill","readUInt8","185","global","process","inspect","obj","opts","ctx","seen","stylize","stylizeNoColor","arguments","length","depth","colors","isBoolean","showHidden","_extend","isUndefined","customInspect","stylizeWithColor","formatValue","str","styleType","style","styles","arrayToHash","array","hash","forEach","val","idx","value","recurseTimes","isFunction","constructor","prototype","ret","isString","primitive","formatPrimitive","keys","Object","visibleKeys","getOwnPropertyNames","isError","indexOf","formatError","name","isRegExp","RegExp","toString","call","isDate","Date","base","braces","isArray","toUTCString","push","output","formatArray","map","key","formatProperty","pop","reduceToSingleString","simple","JSON","stringify","replace","isNumber","isNull","Error","i","l","hasOwnProperty","String","match","desc","getOwnPropertyDescriptor","get","set","split","line","join","substr","numLinesEst","reduce","prev","cur","ar","Array","isNullOrUndefined","isSymbol","re","isObject","objectToString","d","e","isPrimitive","o","pad","n","timestamp","time","getHours","getMinutes","getSeconds","getDate","months","getMonth","prop","formatRegExp","format","f","objects","args","len","x","Number","_","deprecate","fn","msg","deprecated","warned","throwDeprecation","traceDeprecation","console","trace","error","apply","this","noDeprecation","debugEnviron","debugs","debuglog","NODE_ENV","NODE_DEBUG","toUpperCase","test","pid","bold","italic","underline","inverse","white","grey","black","blue","cyan","green","magenta","red","yellow","special","number","boolean","undefined","null","string","date","regexp","isBuffer","log","inherits","origin","add","186","defaultSetTimout","defaultClearTimeout","runTimeout","fun","cachedSetTimeout","setTimeout","runClearTimeout","marker","cachedClearTimeout","clearTimeout","cleanUpNextTick","draining","currentQueue","queue","concat","queueIndex","drainQueue","timeout","run","Item","noop","nextTick","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","187","markdown","parse","toHTML","188","expose","mk_block_toSource","uneval","trailing","lineNumber","mk_block_inspect","util","count_lines","strong_em","tag","md","CloseTag","len_after","state_slot","other_slot","text","orig_match","shift","other","slice","state","unshift","res","processInline","last","split_meta_hash","meta_string","meta","parts","in_quotes","letter","extract_attr","jsonml","escapeHTML","render_tree","attributes","content","tag_attrs","a","convert_tree_to_html","tree","references","options","preprocessTreeNode","attrs","level","code","splice","src","href","ref","original","merge_text_nodes","Markdown","dialect","dialects","Gruber","em_state","strong_state","debug_indent","source","toTree","input","toHTMLTree","renderJsonML","refs","html","mk_block","block","trail","s","toSource","split_blocks","startLine","m","blocks","line_no","exec","lastIndex","processBlock","next","cbs","ord","__order__","__call__","debug","inline","custom_root","old_tree","b","print","loop_re_over_block","cb","valueOf","atxHeader","header","setextHeader","block_search","substring","horizRule","lists","regex_for_depth","indent_re","any_list","expand_tab","li","loose","nl","add_to","what","get_contained_blocks","paragraphify","stack","list","last_li","sublist","bullet_list","is_list_re","make_list","indent","lines","li_accumulate","line_re","wanted_depth","Math","floor","found","contained","next_block","hr","blockquote","abutting","processedBlock","attr","isEmpty","referenceDefn","toLowerCase","para","__oneElement__","patterns_or_re","previous_nodes","__patterns__","index","patterns","out","]","}","__escape__","\\","charAt","![","alt","[","orig","DialectHelpers","inline_until_char","link","consumed","children","url","open_parens","<","`","  \n","buildBlockOrder","buildInlinePatterns","pattern","want","nodes","subclassDialect","Block","Inline","Maruku","processMetaHash","id","document_meta","pairs","p","block_meta","node","result","definition_list","tight","terms","defns","table","_split_on_unescaped","ch","r","leading_pipe","no_leading_pipe","html_attrs","align","trim","row","html_row","matches","before","k","arr","thisp","root","189","create","ctor","superCtor","super_","enumerable","writable","configurable","TempCtor","239","sources","names","mappings","file","sourceRoot","250","render","_vm","_h","$createElement","_c","_self","gutter","staticClass","span","offset","slot","_v","domProps","innerHTML","_s","aboutContent","_e","staticRenderFns","259","locals","263","__webpack_exports__","defineProperty","$","__WEBPACK_IMPORTED_MODULE_0__components_header_vue__","__WEBPACK_IMPORTED_MODULE_0__components_header_vue___default","__WEBPACK_IMPORTED_MODULE_1_markdown__","__WEBPACK_IMPORTED_MODULE_1_markdown___default","__WEBPACK_IMPORTED_MODULE_2__assets_about_md__","__WEBPACK_IMPORTED_MODULE_2__assets_about_md___default","data","computed","created","fetchAboutPage","mounted","methods","_this","setLoading","self","done","fail","$store","commit","components","cvHead","271"],"mappings":"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","file":"static/js/5.d9880197652183191545.js","sourcesContent":["webpackJsonp([5],{\n\n/***/ 175:\n/***/ (function(module, exports, __webpack_require__) {\n\nfunction injectStyle (ssrContext) {\n  __webpack_require__(259)\n}\nvar Component = __webpack_require__(12)(\n  /* script */\n  __webpack_require__(263),\n  /* template */\n  __webpack_require__(250),\n  /* styles */\n  injectStyle,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n\n/***/ 184:\n/***/ (function(module, exports) {\n\nmodule.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}\n\n/***/ }),\n\n/***/ 185:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = __webpack_require__.i({\"NODE_ENV\":\"production\"}).NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = __webpack_require__(184);\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = __webpack_require__(189);\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(40), __webpack_require__(186)))\n\n/***/ }),\n\n/***/ 186:\n/***/ (function(module, exports) {\n\n// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n/***/ }),\n\n/***/ 187:\n/***/ (function(module, exports, __webpack_require__) {\n\n// super simple module for the most common nodejs use case.\nexports.markdown = __webpack_require__(188);\nexports.parse = exports.markdown.toHTML;\n\n\n/***/ }),\n\n/***/ 188:\n/***/ (function(module, exports, __webpack_require__) {\n\n// Released under MIT license\n// Copyright (c) 2009-2010 Dominic Baggott\n// Copyright (c) 2009-2010 Ash Berlin\n// Copyright (c) 2011 Christoph Dorn <christoph@christophdorn.com> (http://www.christophdorn.com)\n\n/*jshint browser:true, devel:true */\n\n(function( expose ) {\n\n/**\n *  class Markdown\n *\n *  Markdown processing in Javascript done right. We have very particular views\n *  on what constitutes 'right' which include:\n *\n *  - produces well-formed HTML (this means that em and strong nesting is\n *    important)\n *\n *  - has an intermediate representation to allow processing of parsed data (We\n *    in fact have two, both as [JsonML]: a markdown tree and an HTML tree).\n *\n *  - is easily extensible to add new dialects without having to rewrite the\n *    entire parsing mechanics\n *\n *  - has a good test suite\n *\n *  This implementation fulfills all of these (except that the test suite could\n *  do with expanding to automatically run all the fixtures from other Markdown\n *  implementations.)\n *\n *  ##### Intermediate Representation\n *\n *  *TODO* Talk about this :) Its JsonML, but document the node names we use.\n *\n *  [JsonML]: http://jsonml.org/ \"JSON Markup Language\"\n **/\nvar Markdown = expose.Markdown = function(dialect) {\n  switch (typeof dialect) {\n    case \"undefined\":\n      this.dialect = Markdown.dialects.Gruber;\n      break;\n    case \"object\":\n      this.dialect = dialect;\n      break;\n    default:\n      if ( dialect in Markdown.dialects ) {\n        this.dialect = Markdown.dialects[dialect];\n      }\n      else {\n        throw new Error(\"Unknown Markdown dialect '\" + String(dialect) + \"'\");\n      }\n      break;\n  }\n  this.em_state = [];\n  this.strong_state = [];\n  this.debug_indent = \"\";\n};\n\n/**\n *  parse( markdown, [dialect] ) -> JsonML\n *  - markdown (String): markdown string to parse\n *  - dialect (String | Dialect): the dialect to use, defaults to gruber\n *\n *  Parse `markdown` and return a markdown document as a Markdown.JsonML tree.\n **/\nexpose.parse = function( source, dialect ) {\n  // dialect will default if undefined\n  var md = new Markdown( dialect );\n  return md.toTree( source );\n};\n\n/**\n *  toHTML( markdown, [dialect]  ) -> String\n *  toHTML( md_tree ) -> String\n *  - markdown (String): markdown string to parse\n *  - md_tree (Markdown.JsonML): parsed markdown tree\n *\n *  Take markdown (either as a string or as a JsonML tree) and run it through\n *  [[toHTMLTree]] then turn it into a well-formated HTML fragment.\n **/\nexpose.toHTML = function toHTML( source , dialect , options ) {\n  var input = expose.toHTMLTree( source , dialect , options );\n\n  return expose.renderJsonML( input );\n};\n\n/**\n *  toHTMLTree( markdown, [dialect] ) -> JsonML\n *  toHTMLTree( md_tree ) -> JsonML\n *  - markdown (String): markdown string to parse\n *  - dialect (String | Dialect): the dialect to use, defaults to gruber\n *  - md_tree (Markdown.JsonML): parsed markdown tree\n *\n *  Turn markdown into HTML, represented as a JsonML tree. If a string is given\n *  to this function, it is first parsed into a markdown tree by calling\n *  [[parse]].\n **/\nexpose.toHTMLTree = function toHTMLTree( input, dialect , options ) {\n  // convert string input to an MD tree\n  if ( typeof input ===\"string\" ) input = this.parse( input, dialect );\n\n  // Now convert the MD tree to an HTML tree\n\n  // remove references from the tree\n  var attrs = extract_attr( input ),\n      refs = {};\n\n  if ( attrs && attrs.references ) {\n    refs = attrs.references;\n  }\n\n  var html = convert_tree_to_html( input, refs , options );\n  merge_text_nodes( html );\n  return html;\n};\n\n// For Spidermonkey based engines\nfunction mk_block_toSource() {\n  return \"Markdown.mk_block( \" +\n          uneval(this.toString()) +\n          \", \" +\n          uneval(this.trailing) +\n          \", \" +\n          uneval(this.lineNumber) +\n          \" )\";\n}\n\n// node\nfunction mk_block_inspect() {\n  var util = __webpack_require__(185);\n  return \"Markdown.mk_block( \" +\n          util.inspect(this.toString()) +\n          \", \" +\n          util.inspect(this.trailing) +\n          \", \" +\n          util.inspect(this.lineNumber) +\n          \" )\";\n\n}\n\nvar mk_block = Markdown.mk_block = function(block, trail, line) {\n  // Be helpful for default case in tests.\n  if ( arguments.length == 1 ) trail = \"\\n\\n\";\n\n  var s = new String(block);\n  s.trailing = trail;\n  // To make it clear its not just a string\n  s.inspect = mk_block_inspect;\n  s.toSource = mk_block_toSource;\n\n  if ( line != undefined )\n    s.lineNumber = line;\n\n  return s;\n};\n\nfunction count_lines( str ) {\n  var n = 0, i = -1;\n  while ( ( i = str.indexOf(\"\\n\", i + 1) ) !== -1 ) n++;\n  return n;\n}\n\n// Internal - split source into rough blocks\nMarkdown.prototype.split_blocks = function splitBlocks( input, startLine ) {\n  input = input.replace(/(\\r\\n|\\n|\\r)/g, \"\\n\");\n  // [\\s\\S] matches _anything_ (newline or space)\n  // [^] is equivalent but doesn't work in IEs.\n  var re = /([\\s\\S]+?)($|\\n#|\\n(?:\\s*\\n|$)+)/g,\n      blocks = [],\n      m;\n\n  var line_no = 1;\n\n  if ( ( m = /^(\\s*\\n)/.exec(input) ) != null ) {\n    // skip (but count) leading blank lines\n    line_no += count_lines( m[0] );\n    re.lastIndex = m[0].length;\n  }\n\n  while ( ( m = re.exec(input) ) !== null ) {\n    if (m[2] == \"\\n#\") {\n      m[2] = \"\\n\";\n      re.lastIndex--;\n    }\n    blocks.push( mk_block( m[1], m[2], line_no ) );\n    line_no += count_lines( m[0] );\n  }\n\n  return blocks;\n};\n\n/**\n *  Markdown#processBlock( block, next ) -> undefined | [ JsonML, ... ]\n *  - block (String): the block to process\n *  - next (Array): the following blocks\n *\n * Process `block` and return an array of JsonML nodes representing `block`.\n *\n * It does this by asking each block level function in the dialect to process\n * the block until one can. Succesful handling is indicated by returning an\n * array (with zero or more JsonML nodes), failure by a false value.\n *\n * Blocks handlers are responsible for calling [[Markdown#processInline]]\n * themselves as appropriate.\n *\n * If the blocks were split incorrectly or adjacent blocks need collapsing you\n * can adjust `next` in place using shift/splice etc.\n *\n * If any of this default behaviour is not right for the dialect, you can\n * define a `__call__` method on the dialect that will get invoked to handle\n * the block processing.\n */\nMarkdown.prototype.processBlock = function processBlock( block, next ) {\n  var cbs = this.dialect.block,\n      ord = cbs.__order__;\n\n  if ( \"__call__\" in cbs ) {\n    return cbs.__call__.call(this, block, next);\n  }\n\n  for ( var i = 0; i < ord.length; i++ ) {\n    //D:this.debug( \"Testing\", ord[i] );\n    var res = cbs[ ord[i] ].call( this, block, next );\n    if ( res ) {\n      //D:this.debug(\"  matched\");\n      if ( !isArray(res) || ( res.length > 0 && !( isArray(res[0]) ) ) )\n        this.debug(ord[i], \"didn't return a proper array\");\n      //D:this.debug( \"\" );\n      return res;\n    }\n  }\n\n  // Uhoh! no match! Should we throw an error?\n  return [];\n};\n\nMarkdown.prototype.processInline = function processInline( block ) {\n  return this.dialect.inline.__call__.call( this, String( block ) );\n};\n\n/**\n *  Markdown#toTree( source ) -> JsonML\n *  - source (String): markdown source to parse\n *\n *  Parse `source` into a JsonML tree representing the markdown document.\n **/\n// custom_tree means set this.tree to `custom_tree` and restore old value on return\nMarkdown.prototype.toTree = function toTree( source, custom_root ) {\n  var blocks = source instanceof Array ? source : this.split_blocks( source );\n\n  // Make tree a member variable so its easier to mess with in extensions\n  var old_tree = this.tree;\n  try {\n    this.tree = custom_root || this.tree || [ \"markdown\" ];\n\n    blocks:\n    while ( blocks.length ) {\n      var b = this.processBlock( blocks.shift(), blocks );\n\n      // Reference blocks and the like won't return any content\n      if ( !b.length ) continue blocks;\n\n      this.tree.push.apply( this.tree, b );\n    }\n    return this.tree;\n  }\n  finally {\n    if ( custom_root ) {\n      this.tree = old_tree;\n    }\n  }\n};\n\n// Noop by default\nMarkdown.prototype.debug = function () {\n  var args = Array.prototype.slice.call( arguments);\n  args.unshift(this.debug_indent);\n  if ( typeof print !== \"undefined\" )\n      print.apply( print, args );\n  if ( typeof console !== \"undefined\" && typeof console.log !== \"undefined\" )\n      console.log.apply( null, args );\n}\n\nMarkdown.prototype.loop_re_over_block = function( re, block, cb ) {\n  // Dont use /g regexps with this\n  var m,\n      b = block.valueOf();\n\n  while ( b.length && (m = re.exec(b) ) != null ) {\n    b = b.substr( m[0].length );\n    cb.call(this, m);\n  }\n  return b;\n};\n\n/**\n * Markdown.dialects\n *\n * Namespace of built-in dialects.\n **/\nMarkdown.dialects = {};\n\n/**\n * Markdown.dialects.Gruber\n *\n * The default dialect that follows the rules set out by John Gruber's\n * markdown.pl as closely as possible. Well actually we follow the behaviour of\n * that script which in some places is not exactly what the syntax web page\n * says.\n **/\nMarkdown.dialects.Gruber = {\n  block: {\n    atxHeader: function atxHeader( block, next ) {\n      var m = block.match( /^(#{1,6})\\s*(.*?)\\s*#*\\s*(?:\\n|$)/ );\n\n      if ( !m ) return undefined;\n\n      var header = [ \"header\", { level: m[ 1 ].length } ];\n      Array.prototype.push.apply(header, this.processInline(m[ 2 ]));\n\n      if ( m[0].length < block.length )\n        next.unshift( mk_block( block.substr( m[0].length ), block.trailing, block.lineNumber + 2 ) );\n\n      return [ header ];\n    },\n\n    setextHeader: function setextHeader( block, next ) {\n      var m = block.match( /^(.*)\\n([-=])\\2\\2+(?:\\n|$)/ );\n\n      if ( !m ) return undefined;\n\n      var level = ( m[ 2 ] === \"=\" ) ? 1 : 2;\n      var header = [ \"header\", { level : level }, m[ 1 ] ];\n\n      if ( m[0].length < block.length )\n        next.unshift( mk_block( block.substr( m[0].length ), block.trailing, block.lineNumber + 2 ) );\n\n      return [ header ];\n    },\n\n    code: function code( block, next ) {\n      // |    Foo\n      // |bar\n      // should be a code block followed by a paragraph. Fun\n      //\n      // There might also be adjacent code block to merge.\n\n      var ret = [],\n          re = /^(?: {0,3}\\t| {4})(.*)\\n?/,\n          lines;\n\n      // 4 spaces + content\n      if ( !block.match( re ) ) return undefined;\n\n      block_search:\n      do {\n        // Now pull out the rest of the lines\n        var b = this.loop_re_over_block(\n                  re, block.valueOf(), function( m ) { ret.push( m[1] ); } );\n\n        if ( b.length ) {\n          // Case alluded to in first comment. push it back on as a new block\n          next.unshift( mk_block(b, block.trailing) );\n          break block_search;\n        }\n        else if ( next.length ) {\n          // Check the next block - it might be code too\n          if ( !next[0].match( re ) ) break block_search;\n\n          // Pull how how many blanks lines follow - minus two to account for .join\n          ret.push ( block.trailing.replace(/[^\\n]/g, \"\").substring(2) );\n\n          block = next.shift();\n        }\n        else {\n          break block_search;\n        }\n      } while ( true );\n\n      return [ [ \"code_block\", ret.join(\"\\n\") ] ];\n    },\n\n    horizRule: function horizRule( block, next ) {\n      // this needs to find any hr in the block to handle abutting blocks\n      var m = block.match( /^(?:([\\s\\S]*?)\\n)?[ \\t]*([-_*])(?:[ \\t]*\\2){2,}[ \\t]*(?:\\n([\\s\\S]*))?$/ );\n\n      if ( !m ) {\n        return undefined;\n      }\n\n      var jsonml = [ [ \"hr\" ] ];\n\n      // if there's a leading abutting block, process it\n      if ( m[ 1 ] ) {\n        jsonml.unshift.apply( jsonml, this.processBlock( m[ 1 ], [] ) );\n      }\n\n      // if there's a trailing abutting block, stick it into next\n      if ( m[ 3 ] ) {\n        next.unshift( mk_block( m[ 3 ] ) );\n      }\n\n      return jsonml;\n    },\n\n    // There are two types of lists. Tight and loose. Tight lists have no whitespace\n    // between the items (and result in text just in the <li>) and loose lists,\n    // which have an empty line between list items, resulting in (one or more)\n    // paragraphs inside the <li>.\n    //\n    // There are all sorts weird edge cases about the original markdown.pl's\n    // handling of lists:\n    //\n    // * Nested lists are supposed to be indented by four chars per level. But\n    //   if they aren't, you can get a nested list by indenting by less than\n    //   four so long as the indent doesn't match an indent of an existing list\n    //   item in the 'nest stack'.\n    //\n    // * The type of the list (bullet or number) is controlled just by the\n    //    first item at the indent. Subsequent changes are ignored unless they\n    //    are for nested lists\n    //\n    lists: (function( ) {\n      // Use a closure to hide a few variables.\n      var any_list = \"[*+-]|\\\\d+\\\\.\",\n          bullet_list = /[*+-]/,\n          number_list = /\\d+\\./,\n          // Capture leading indent as it matters for determining nested lists.\n          is_list_re = new RegExp( \"^( {0,3})(\" + any_list + \")[ \\t]+\" ),\n          indent_re = \"(?: {0,3}\\\\t| {4})\";\n\n      // TODO: Cache this regexp for certain depths.\n      // Create a regexp suitable for matching an li for a given stack depth\n      function regex_for_depth( depth ) {\n\n        return new RegExp(\n          // m[1] = indent, m[2] = list_type\n          \"(?:^(\" + indent_re + \"{0,\" + depth + \"} {0,3})(\" + any_list + \")\\\\s+)|\" +\n          // m[3] = cont\n          \"(^\" + indent_re + \"{0,\" + (depth-1) + \"}[ ]{0,4})\"\n        );\n      }\n      function expand_tab( input ) {\n        return input.replace( / {0,3}\\t/g, \"    \" );\n      }\n\n      // Add inline content `inline` to `li`. inline comes from processInline\n      // so is an array of content\n      function add(li, loose, inline, nl) {\n        if ( loose ) {\n          li.push( [ \"para\" ].concat(inline) );\n          return;\n        }\n        // Hmmm, should this be any block level element or just paras?\n        var add_to = li[li.length -1] instanceof Array && li[li.length - 1][0] == \"para\"\n                   ? li[li.length -1]\n                   : li;\n\n        // If there is already some content in this list, add the new line in\n        if ( nl && li.length > 1 ) inline.unshift(nl);\n\n        for ( var i = 0; i < inline.length; i++ ) {\n          var what = inline[i],\n              is_str = typeof what == \"string\";\n          if ( is_str && add_to.length > 1 && typeof add_to[add_to.length-1] == \"string\" ) {\n            add_to[ add_to.length-1 ] += what;\n          }\n          else {\n            add_to.push( what );\n          }\n        }\n      }\n\n      // contained means have an indent greater than the current one. On\n      // *every* line in the block\n      function get_contained_blocks( depth, blocks ) {\n\n        var re = new RegExp( \"^(\" + indent_re + \"{\" + depth + \"}.*?\\\\n?)*$\" ),\n            replace = new RegExp(\"^\" + indent_re + \"{\" + depth + \"}\", \"gm\"),\n            ret = [];\n\n        while ( blocks.length > 0 ) {\n          if ( re.exec( blocks[0] ) ) {\n            var b = blocks.shift(),\n                // Now remove that indent\n                x = b.replace( replace, \"\");\n\n            ret.push( mk_block( x, b.trailing, b.lineNumber ) );\n          }\n          else {\n            break;\n          }\n        }\n        return ret;\n      }\n\n      // passed to stack.forEach to turn list items up the stack into paras\n      function paragraphify(s, i, stack) {\n        var list = s.list;\n        var last_li = list[list.length-1];\n\n        if ( last_li[1] instanceof Array && last_li[1][0] == \"para\" ) {\n          return;\n        }\n        if ( i + 1 == stack.length ) {\n          // Last stack frame\n          // Keep the same array, but replace the contents\n          last_li.push( [\"para\"].concat( last_li.splice(1, last_li.length - 1) ) );\n        }\n        else {\n          var sublist = last_li.pop();\n          last_li.push( [\"para\"].concat( last_li.splice(1, last_li.length - 1) ), sublist );\n        }\n      }\n\n      // The matcher function\n      return function( block, next ) {\n        var m = block.match( is_list_re );\n        if ( !m ) return undefined;\n\n        function make_list( m ) {\n          var list = bullet_list.exec( m[2] )\n                   ? [\"bulletlist\"]\n                   : [\"numberlist\"];\n\n          stack.push( { list: list, indent: m[1] } );\n          return list;\n        }\n\n\n        var stack = [], // Stack of lists for nesting.\n            list = make_list( m ),\n            last_li,\n            loose = false,\n            ret = [ stack[0].list ],\n            i;\n\n        // Loop to search over block looking for inner block elements and loose lists\n        loose_search:\n        while ( true ) {\n          // Split into lines preserving new lines at end of line\n          var lines = block.split( /(?=\\n)/ );\n\n          // We have to grab all lines for a li and call processInline on them\n          // once as there are some inline things that can span lines.\n          var li_accumulate = \"\";\n\n          // Loop over the lines in this block looking for tight lists.\n          tight_search:\n          for ( var line_no = 0; line_no < lines.length; line_no++ ) {\n            var nl = \"\",\n                l = lines[line_no].replace(/^\\n/, function(n) { nl = n; return \"\"; });\n\n            // TODO: really should cache this\n            var line_re = regex_for_depth( stack.length );\n\n            m = l.match( line_re );\n            //print( \"line:\", uneval(l), \"\\nline match:\", uneval(m) );\n\n            // We have a list item\n            if ( m[1] !== undefined ) {\n              // Process the previous list item, if any\n              if ( li_accumulate.length ) {\n                add( last_li, loose, this.processInline( li_accumulate ), nl );\n                // Loose mode will have been dealt with. Reset it\n                loose = false;\n                li_accumulate = \"\";\n              }\n\n              m[1] = expand_tab( m[1] );\n              var wanted_depth = Math.floor(m[1].length/4)+1;\n              //print( \"want:\", wanted_depth, \"stack:\", stack.length);\n              if ( wanted_depth > stack.length ) {\n                // Deep enough for a nested list outright\n                //print ( \"new nested list\" );\n                list = make_list( m );\n                last_li.push( list );\n                last_li = list[1] = [ \"listitem\" ];\n              }\n              else {\n                // We aren't deep enough to be strictly a new level. This is\n                // where Md.pl goes nuts. If the indent matches a level in the\n                // stack, put it there, else put it one deeper then the\n                // wanted_depth deserves.\n                var found = false;\n                for ( i = 0; i < stack.length; i++ ) {\n                  if ( stack[ i ].indent != m[1] ) continue;\n                  list = stack[ i ].list;\n                  stack.splice( i+1, stack.length - (i+1) );\n                  found = true;\n                  break;\n                }\n\n                if (!found) {\n                  //print(\"not found. l:\", uneval(l));\n                  wanted_depth++;\n                  if ( wanted_depth <= stack.length ) {\n                    stack.splice(wanted_depth, stack.length - wanted_depth);\n                    //print(\"Desired depth now\", wanted_depth, \"stack:\", stack.length);\n                    list = stack[wanted_depth-1].list;\n                    //print(\"list:\", uneval(list) );\n                  }\n                  else {\n                    //print (\"made new stack for messy indent\");\n                    list = make_list(m);\n                    last_li.push(list);\n                  }\n                }\n\n                //print( uneval(list), \"last\", list === stack[stack.length-1].list );\n                last_li = [ \"listitem\" ];\n                list.push(last_li);\n              } // end depth of shenegains\n              nl = \"\";\n            }\n\n            // Add content\n            if ( l.length > m[0].length ) {\n              li_accumulate += nl + l.substr( m[0].length );\n            }\n          } // tight_search\n\n          if ( li_accumulate.length ) {\n            add( last_li, loose, this.processInline( li_accumulate ), nl );\n            // Loose mode will have been dealt with. Reset it\n            loose = false;\n            li_accumulate = \"\";\n          }\n\n          // Look at the next block - we might have a loose list. Or an extra\n          // paragraph for the current li\n          var contained = get_contained_blocks( stack.length, next );\n\n          // Deal with code blocks or properly nested lists\n          if ( contained.length > 0 ) {\n            // Make sure all listitems up the stack are paragraphs\n            forEach( stack, paragraphify, this);\n\n            last_li.push.apply( last_li, this.toTree( contained, [] ) );\n          }\n\n          var next_block = next[0] && next[0].valueOf() || \"\";\n\n          if ( next_block.match(is_list_re) || next_block.match( /^ / ) ) {\n            block = next.shift();\n\n            // Check for an HR following a list: features/lists/hr_abutting\n            var hr = this.dialect.block.horizRule( block, next );\n\n            if ( hr ) {\n              ret.push.apply(ret, hr);\n              break;\n            }\n\n            // Make sure all listitems up the stack are paragraphs\n            forEach( stack, paragraphify, this);\n\n            loose = true;\n            continue loose_search;\n          }\n          break;\n        } // loose_search\n\n        return ret;\n      };\n    })(),\n\n    blockquote: function blockquote( block, next ) {\n      if ( !block.match( /^>/m ) )\n        return undefined;\n\n      var jsonml = [];\n\n      // separate out the leading abutting block, if any. I.e. in this case:\n      //\n      //  a\n      //  > b\n      //\n      if ( block[ 0 ] != \">\" ) {\n        var lines = block.split( /\\n/ ),\n            prev = [],\n            line_no = block.lineNumber;\n\n        // keep shifting lines until you find a crotchet\n        while ( lines.length && lines[ 0 ][ 0 ] != \">\" ) {\n            prev.push( lines.shift() );\n            line_no++;\n        }\n\n        var abutting = mk_block( prev.join( \"\\n\" ), \"\\n\", block.lineNumber );\n        jsonml.push.apply( jsonml, this.processBlock( abutting, [] ) );\n        // reassemble new block of just block quotes!\n        block = mk_block( lines.join( \"\\n\" ), block.trailing, line_no );\n      }\n\n\n      // if the next block is also a blockquote merge it in\n      while ( next.length && next[ 0 ][ 0 ] == \">\" ) {\n        var b = next.shift();\n        block = mk_block( block + block.trailing + b, b.trailing, block.lineNumber );\n      }\n\n      // Strip off the leading \"> \" and re-process as a block.\n      var input = block.replace( /^> ?/gm, \"\" ),\n          old_tree = this.tree,\n          processedBlock = this.toTree( input, [ \"blockquote\" ] ),\n          attr = extract_attr( processedBlock );\n\n      // If any link references were found get rid of them\n      if ( attr && attr.references ) {\n        delete attr.references;\n        // And then remove the attribute object if it's empty\n        if ( isEmpty( attr ) ) {\n          processedBlock.splice( 1, 1 );\n        }\n      }\n\n      jsonml.push( processedBlock );\n      return jsonml;\n    },\n\n    referenceDefn: function referenceDefn( block, next) {\n      var re = /^\\s*\\[(.*?)\\]:\\s*(\\S+)(?:\\s+(?:(['\"])(.*?)\\3|\\((.*?)\\)))?\\n?/;\n      // interesting matches are [ , ref_id, url, , title, title ]\n\n      if ( !block.match(re) )\n        return undefined;\n\n      // make an attribute node if it doesn't exist\n      if ( !extract_attr( this.tree ) ) {\n        this.tree.splice( 1, 0, {} );\n      }\n\n      var attrs = extract_attr( this.tree );\n\n      // make a references hash if it doesn't exist\n      if ( attrs.references === undefined ) {\n        attrs.references = {};\n      }\n\n      var b = this.loop_re_over_block(re, block, function( m ) {\n\n        if ( m[2] && m[2][0] == \"<\" && m[2][m[2].length-1] == \">\" )\n          m[2] = m[2].substring( 1, m[2].length - 1 );\n\n        var ref = attrs.references[ m[1].toLowerCase() ] = {\n          href: m[2]\n        };\n\n        if ( m[4] !== undefined )\n          ref.title = m[4];\n        else if ( m[5] !== undefined )\n          ref.title = m[5];\n\n      } );\n\n      if ( b.length )\n        next.unshift( mk_block( b, block.trailing ) );\n\n      return [];\n    },\n\n    para: function para( block, next ) {\n      // everything's a para!\n      return [ [\"para\"].concat( this.processInline( block ) ) ];\n    }\n  }\n};\n\nMarkdown.dialects.Gruber.inline = {\n\n    __oneElement__: function oneElement( text, patterns_or_re, previous_nodes ) {\n      var m,\n          res,\n          lastIndex = 0;\n\n      patterns_or_re = patterns_or_re || this.dialect.inline.__patterns__;\n      var re = new RegExp( \"([\\\\s\\\\S]*?)(\" + (patterns_or_re.source || patterns_or_re) + \")\" );\n\n      m = re.exec( text );\n      if (!m) {\n        // Just boring text\n        return [ text.length, text ];\n      }\n      else if ( m[1] ) {\n        // Some un-interesting text matched. Return that first\n        return [ m[1].length, m[1] ];\n      }\n\n      var res;\n      if ( m[2] in this.dialect.inline ) {\n        res = this.dialect.inline[ m[2] ].call(\n                  this,\n                  text.substr( m.index ), m, previous_nodes || [] );\n      }\n      // Default for now to make dev easier. just slurp special and output it.\n      res = res || [ m[2].length, m[2] ];\n      return res;\n    },\n\n    __call__: function inline( text, patterns ) {\n\n      var out = [],\n          res;\n\n      function add(x) {\n        //D:self.debug(\"  adding output\", uneval(x));\n        if ( typeof x == \"string\" && typeof out[out.length-1] == \"string\" )\n          out[ out.length-1 ] += x;\n        else\n          out.push(x);\n      }\n\n      while ( text.length > 0 ) {\n        res = this.dialect.inline.__oneElement__.call(this, text, patterns, out );\n        text = text.substr( res.shift() );\n        forEach(res, add )\n      }\n\n      return out;\n    },\n\n    // These characters are intersting elsewhere, so have rules for them so that\n    // chunks of plain text blocks don't include them\n    \"]\": function () {},\n    \"}\": function () {},\n\n    __escape__ : /^\\\\[\\\\`\\*_{}\\[\\]()#\\+.!\\-]/,\n\n    \"\\\\\": function escaped( text ) {\n      // [ length of input processed, node/children to add... ]\n      // Only esacape: \\ ` * _ { } [ ] ( ) # * + - . !\n      if ( this.dialect.inline.__escape__.exec( text ) )\n        return [ 2, text.charAt( 1 ) ];\n      else\n        // Not an esacpe\n        return [ 1, \"\\\\\" ];\n    },\n\n    \"![\": function image( text ) {\n\n      // Unlike images, alt text is plain text only. no other elements are\n      // allowed in there\n\n      // ![Alt text](/path/to/img.jpg \"Optional title\")\n      //      1          2            3       4         <--- captures\n      var m = text.match( /^!\\[(.*?)\\][ \\t]*\\([ \\t]*([^\")]*?)(?:[ \\t]+([\"'])(.*?)\\3)?[ \\t]*\\)/ );\n\n      if ( m ) {\n        if ( m[2] && m[2][0] == \"<\" && m[2][m[2].length-1] == \">\" )\n          m[2] = m[2].substring( 1, m[2].length - 1 );\n\n        m[2] = this.dialect.inline.__call__.call( this, m[2], /\\\\/ )[0];\n\n        var attrs = { alt: m[1], href: m[2] || \"\" };\n        if ( m[4] !== undefined)\n          attrs.title = m[4];\n\n        return [ m[0].length, [ \"img\", attrs ] ];\n      }\n\n      // ![Alt text][id]\n      m = text.match( /^!\\[(.*?)\\][ \\t]*\\[(.*?)\\]/ );\n\n      if ( m ) {\n        // We can't check if the reference is known here as it likely wont be\n        // found till after. Check it in md tree->hmtl tree conversion\n        return [ m[0].length, [ \"img_ref\", { alt: m[1], ref: m[2].toLowerCase(), original: m[0] } ] ];\n      }\n\n      // Just consume the '!['\n      return [ 2, \"![\" ];\n    },\n\n    \"[\": function link( text ) {\n\n      var orig = String(text);\n      // Inline content is possible inside `link text`\n      var res = Markdown.DialectHelpers.inline_until_char.call( this, text.substr(1), \"]\" );\n\n      // No closing ']' found. Just consume the [\n      if ( !res ) return [ 1, \"[\" ];\n\n      var consumed = 1 + res[ 0 ],\n          children = res[ 1 ],\n          link,\n          attrs;\n\n      // At this point the first [...] has been parsed. See what follows to find\n      // out which kind of link we are (reference or direct url)\n      text = text.substr( consumed );\n\n      // [link text](/path/to/img.jpg \"Optional title\")\n      //                 1            2       3         <--- captures\n      // This will capture up to the last paren in the block. We then pull\n      // back based on if there a matching ones in the url\n      //    ([here](/url/(test))\n      // The parens have to be balanced\n      var m = text.match( /^\\s*\\([ \\t]*([^\"']*)(?:[ \\t]+([\"'])(.*?)\\2)?[ \\t]*\\)/ );\n      if ( m ) {\n        var url = m[1];\n        consumed += m[0].length;\n\n        if ( url && url[0] == \"<\" && url[url.length-1] == \">\" )\n          url = url.substring( 1, url.length - 1 );\n\n        // If there is a title we don't have to worry about parens in the url\n        if ( !m[3] ) {\n          var open_parens = 1; // One open that isn't in the capture\n          for ( var len = 0; len < url.length; len++ ) {\n            switch ( url[len] ) {\n            case \"(\":\n              open_parens++;\n              break;\n            case \")\":\n              if ( --open_parens == 0) {\n                consumed -= url.length - len;\n                url = url.substring(0, len);\n              }\n              break;\n            }\n          }\n        }\n\n        // Process escapes only\n        url = this.dialect.inline.__call__.call( this, url, /\\\\/ )[0];\n\n        attrs = { href: url || \"\" };\n        if ( m[3] !== undefined)\n          attrs.title = m[3];\n\n        link = [ \"link\", attrs ].concat( children );\n        return [ consumed, link ];\n      }\n\n      // [Alt text][id]\n      // [Alt text] [id]\n      m = text.match( /^\\s*\\[(.*?)\\]/ );\n\n      if ( m ) {\n\n        consumed += m[ 0 ].length;\n\n        // [links][] uses links as its reference\n        attrs = { ref: ( m[ 1 ] || String(children) ).toLowerCase(),  original: orig.substr( 0, consumed ) };\n\n        link = [ \"link_ref\", attrs ].concat( children );\n\n        // We can't check if the reference is known here as it likely wont be\n        // found till after. Check it in md tree->hmtl tree conversion.\n        // Store the original so that conversion can revert if the ref isn't found.\n        return [ consumed, link ];\n      }\n\n      // [id]\n      // Only if id is plain (no formatting.)\n      if ( children.length == 1 && typeof children[0] == \"string\" ) {\n\n        attrs = { ref: children[0].toLowerCase(),  original: orig.substr( 0, consumed ) };\n        link = [ \"link_ref\", attrs, children[0] ];\n        return [ consumed, link ];\n      }\n\n      // Just consume the \"[\"\n      return [ 1, \"[\" ];\n    },\n\n\n    \"<\": function autoLink( text ) {\n      var m;\n\n      if ( ( m = text.match( /^<(?:((https?|ftp|mailto):[^>]+)|(.*?@.*?\\.[a-zA-Z]+))>/ ) ) != null ) {\n        if ( m[3] ) {\n          return [ m[0].length, [ \"link\", { href: \"mailto:\" + m[3] }, m[3] ] ];\n\n        }\n        else if ( m[2] == \"mailto\" ) {\n          return [ m[0].length, [ \"link\", { href: m[1] }, m[1].substr(\"mailto:\".length ) ] ];\n        }\n        else\n          return [ m[0].length, [ \"link\", { href: m[1] }, m[1] ] ];\n      }\n\n      return [ 1, \"<\" ];\n    },\n\n    \"`\": function inlineCode( text ) {\n      // Inline code block. as many backticks as you like to start it\n      // Always skip over the opening ticks.\n      var m = text.match( /(`+)(([\\s\\S]*?)\\1)/ );\n\n      if ( m && m[2] )\n        return [ m[1].length + m[2].length, [ \"inlinecode\", m[3] ] ];\n      else {\n        // TODO: No matching end code found - warn!\n        return [ 1, \"`\" ];\n      }\n    },\n\n    \"  \\n\": function lineBreak( text ) {\n      return [ 3, [ \"linebreak\" ] ];\n    }\n\n};\n\n// Meta Helper/generator method for em and strong handling\nfunction strong_em( tag, md ) {\n\n  var state_slot = tag + \"_state\",\n      other_slot = tag == \"strong\" ? \"em_state\" : \"strong_state\";\n\n  function CloseTag(len) {\n    this.len_after = len;\n    this.name = \"close_\" + md;\n  }\n\n  return function ( text, orig_match ) {\n\n    if ( this[state_slot][0] == md ) {\n      // Most recent em is of this type\n      //D:this.debug(\"closing\", md);\n      this[state_slot].shift();\n\n      // \"Consume\" everything to go back to the recrusion in the else-block below\n      return[ text.length, new CloseTag(text.length-md.length) ];\n    }\n    else {\n      // Store a clone of the em/strong states\n      var other = this[other_slot].slice(),\n          state = this[state_slot].slice();\n\n      this[state_slot].unshift(md);\n\n      //D:this.debug_indent += \"  \";\n\n      // Recurse\n      var res = this.processInline( text.substr( md.length ) );\n      //D:this.debug_indent = this.debug_indent.substr(2);\n\n      var last = res[res.length - 1];\n\n      //D:this.debug(\"processInline from\", tag + \": \", uneval( res ) );\n\n      var check = this[state_slot].shift();\n      if ( last instanceof CloseTag ) {\n        res.pop();\n        // We matched! Huzzah.\n        var consumed = text.length - last.len_after;\n        return [ consumed, [ tag ].concat(res) ];\n      }\n      else {\n        // Restore the state of the other kind. We might have mistakenly closed it.\n        this[other_slot] = other;\n        this[state_slot] = state;\n\n        // We can't reuse the processed result as it could have wrong parsing contexts in it.\n        return [ md.length, md ];\n      }\n    }\n  }; // End returned function\n}\n\nMarkdown.dialects.Gruber.inline[\"**\"] = strong_em(\"strong\", \"**\");\nMarkdown.dialects.Gruber.inline[\"__\"] = strong_em(\"strong\", \"__\");\nMarkdown.dialects.Gruber.inline[\"*\"]  = strong_em(\"em\", \"*\");\nMarkdown.dialects.Gruber.inline[\"_\"]  = strong_em(\"em\", \"_\");\n\n\n// Build default order from insertion order.\nMarkdown.buildBlockOrder = function(d) {\n  var ord = [];\n  for ( var i in d ) {\n    if ( i == \"__order__\" || i == \"__call__\" ) continue;\n    ord.push( i );\n  }\n  d.__order__ = ord;\n};\n\n// Build patterns for inline matcher\nMarkdown.buildInlinePatterns = function(d) {\n  var patterns = [];\n\n  for ( var i in d ) {\n    // __foo__ is reserved and not a pattern\n    if ( i.match( /^__.*__$/) ) continue;\n    var l = i.replace( /([\\\\.*+?|()\\[\\]{}])/g, \"\\\\$1\" )\n             .replace( /\\n/, \"\\\\n\" );\n    patterns.push( i.length == 1 ? l : \"(?:\" + l + \")\" );\n  }\n\n  patterns = patterns.join(\"|\");\n  d.__patterns__ = patterns;\n  //print(\"patterns:\", uneval( patterns ) );\n\n  var fn = d.__call__;\n  d.__call__ = function(text, pattern) {\n    if ( pattern != undefined ) {\n      return fn.call(this, text, pattern);\n    }\n    else\n    {\n      return fn.call(this, text, patterns);\n    }\n  };\n};\n\nMarkdown.DialectHelpers = {};\nMarkdown.DialectHelpers.inline_until_char = function( text, want ) {\n  var consumed = 0,\n      nodes = [];\n\n  while ( true ) {\n    if ( text.charAt( consumed ) == want ) {\n      // Found the character we were looking for\n      consumed++;\n      return [ consumed, nodes ];\n    }\n\n    if ( consumed >= text.length ) {\n      // No closing char found. Abort.\n      return null;\n    }\n\n    var res = this.dialect.inline.__oneElement__.call(this, text.substr( consumed ) );\n    consumed += res[ 0 ];\n    // Add any returned nodes.\n    nodes.push.apply( nodes, res.slice( 1 ) );\n  }\n}\n\n// Helper function to make sub-classing a dialect easier\nMarkdown.subclassDialect = function( d ) {\n  function Block() {}\n  Block.prototype = d.block;\n  function Inline() {}\n  Inline.prototype = d.inline;\n\n  return { block: new Block(), inline: new Inline() };\n};\n\nMarkdown.buildBlockOrder ( Markdown.dialects.Gruber.block );\nMarkdown.buildInlinePatterns( Markdown.dialects.Gruber.inline );\n\nMarkdown.dialects.Maruku = Markdown.subclassDialect( Markdown.dialects.Gruber );\n\nMarkdown.dialects.Maruku.processMetaHash = function processMetaHash( meta_string ) {\n  var meta = split_meta_hash( meta_string ),\n      attr = {};\n\n  for ( var i = 0; i < meta.length; ++i ) {\n    // id: #foo\n    if ( /^#/.test( meta[ i ] ) ) {\n      attr.id = meta[ i ].substring( 1 );\n    }\n    // class: .foo\n    else if ( /^\\./.test( meta[ i ] ) ) {\n      // if class already exists, append the new one\n      if ( attr[\"class\"] ) {\n        attr[\"class\"] = attr[\"class\"] + meta[ i ].replace( /./, \" \" );\n      }\n      else {\n        attr[\"class\"] = meta[ i ].substring( 1 );\n      }\n    }\n    // attribute: foo=bar\n    else if ( /\\=/.test( meta[ i ] ) ) {\n      var s = meta[ i ].split( /\\=/ );\n      attr[ s[ 0 ] ] = s[ 1 ];\n    }\n  }\n\n  return attr;\n}\n\nfunction split_meta_hash( meta_string ) {\n  var meta = meta_string.split( \"\" ),\n      parts = [ \"\" ],\n      in_quotes = false;\n\n  while ( meta.length ) {\n    var letter = meta.shift();\n    switch ( letter ) {\n      case \" \" :\n        // if we're in a quoted section, keep it\n        if ( in_quotes ) {\n          parts[ parts.length - 1 ] += letter;\n        }\n        // otherwise make a new part\n        else {\n          parts.push( \"\" );\n        }\n        break;\n      case \"'\" :\n      case '\"' :\n        // reverse the quotes and move straight on\n        in_quotes = !in_quotes;\n        break;\n      case \"\\\\\" :\n        // shift off the next letter to be used straight away.\n        // it was escaped so we'll keep it whatever it is\n        letter = meta.shift();\n      default :\n        parts[ parts.length - 1 ] += letter;\n        break;\n    }\n  }\n\n  return parts;\n}\n\nMarkdown.dialects.Maruku.block.document_meta = function document_meta( block, next ) {\n  // we're only interested in the first block\n  if ( block.lineNumber > 1 ) return undefined;\n\n  // document_meta blocks consist of one or more lines of `Key: Value\\n`\n  if ( ! block.match( /^(?:\\w+:.*\\n)*\\w+:.*$/ ) ) return undefined;\n\n  // make an attribute node if it doesn't exist\n  if ( !extract_attr( this.tree ) ) {\n    this.tree.splice( 1, 0, {} );\n  }\n\n  var pairs = block.split( /\\n/ );\n  for ( p in pairs ) {\n    var m = pairs[ p ].match( /(\\w+):\\s*(.*)$/ ),\n        key = m[ 1 ].toLowerCase(),\n        value = m[ 2 ];\n\n    this.tree[ 1 ][ key ] = value;\n  }\n\n  // document_meta produces no content!\n  return [];\n};\n\nMarkdown.dialects.Maruku.block.block_meta = function block_meta( block, next ) {\n  // check if the last line of the block is an meta hash\n  var m = block.match( /(^|\\n) {0,3}\\{:\\s*((?:\\\\\\}|[^\\}])*)\\s*\\}$/ );\n  if ( !m ) return undefined;\n\n  // process the meta hash\n  var attr = this.dialect.processMetaHash( m[ 2 ] );\n\n  var hash;\n\n  // if we matched ^ then we need to apply meta to the previous block\n  if ( m[ 1 ] === \"\" ) {\n    var node = this.tree[ this.tree.length - 1 ];\n    hash = extract_attr( node );\n\n    // if the node is a string (rather than JsonML), bail\n    if ( typeof node === \"string\" ) return undefined;\n\n    // create the attribute hash if it doesn't exist\n    if ( !hash ) {\n      hash = {};\n      node.splice( 1, 0, hash );\n    }\n\n    // add the attributes in\n    for ( a in attr ) {\n      hash[ a ] = attr[ a ];\n    }\n\n    // return nothing so the meta hash is removed\n    return [];\n  }\n\n  // pull the meta hash off the block and process what's left\n  var b = block.replace( /\\n.*$/, \"\" ),\n      result = this.processBlock( b, [] );\n\n  // get or make the attributes hash\n  hash = extract_attr( result[ 0 ] );\n  if ( !hash ) {\n    hash = {};\n    result[ 0 ].splice( 1, 0, hash );\n  }\n\n  // attach the attributes to the block\n  for ( a in attr ) {\n    hash[ a ] = attr[ a ];\n  }\n\n  return result;\n};\n\nMarkdown.dialects.Maruku.block.definition_list = function definition_list( block, next ) {\n  // one or more terms followed by one or more definitions, in a single block\n  var tight = /^((?:[^\\s:].*\\n)+):\\s+([\\s\\S]+)$/,\n      list = [ \"dl\" ],\n      i, m;\n\n  // see if we're dealing with a tight or loose block\n  if ( ( m = block.match( tight ) ) ) {\n    // pull subsequent tight DL blocks out of `next`\n    var blocks = [ block ];\n    while ( next.length && tight.exec( next[ 0 ] ) ) {\n      blocks.push( next.shift() );\n    }\n\n    for ( var b = 0; b < blocks.length; ++b ) {\n      var m = blocks[ b ].match( tight ),\n          terms = m[ 1 ].replace( /\\n$/, \"\" ).split( /\\n/ ),\n          defns = m[ 2 ].split( /\\n:\\s+/ );\n\n      // print( uneval( m ) );\n\n      for ( i = 0; i < terms.length; ++i ) {\n        list.push( [ \"dt\", terms[ i ] ] );\n      }\n\n      for ( i = 0; i < defns.length; ++i ) {\n        // run inline processing over the definition\n        list.push( [ \"dd\" ].concat( this.processInline( defns[ i ].replace( /(\\n)\\s+/, \"$1\" ) ) ) );\n      }\n    }\n  }\n  else {\n    return undefined;\n  }\n\n  return [ list ];\n};\n\n// splits on unescaped instances of @ch. If @ch is not a character the result\n// can be unpredictable\n\nMarkdown.dialects.Maruku.block.table = function table (block, next) {\n\n    var _split_on_unescaped = function(s, ch) {\n        ch = ch || '\\\\s';\n        if (ch.match(/^[\\\\|\\[\\]{}?*.+^$]$/)) { ch = '\\\\' + ch; }\n        var res = [ ],\n            r = new RegExp('^((?:\\\\\\\\.|[^\\\\\\\\' + ch + '])*)' + ch + '(.*)'),\n            m;\n        while(m = s.match(r)) {\n            res.push(m[1]);\n            s = m[2];\n        }\n        res.push(s);\n        return res;\n    }\n\n    var leading_pipe = /^ {0,3}\\|(.+)\\n {0,3}\\|\\s*([\\-:]+[\\-| :]*)\\n((?:\\s*\\|.*(?:\\n|$))*)(?=\\n|$)/,\n        // find at least an unescaped pipe in each line\n        no_leading_pipe = /^ {0,3}(\\S(?:\\\\.|[^\\\\|])*\\|.*)\\n {0,3}([\\-:]+\\s*\\|[\\-| :]*)\\n((?:(?:\\\\.|[^\\\\|])*\\|.*(?:\\n|$))*)(?=\\n|$)/,\n        i, m;\n    if (m = block.match(leading_pipe)) {\n        // remove leading pipes in contents\n        // (header and horizontal rule already have the leading pipe left out)\n        m[3] = m[3].replace(/^\\s*\\|/gm, '');\n    } else if (! ( m = block.match(no_leading_pipe))) {\n        return undefined;\n    }\n\n    var table = [ \"table\", [ \"thead\", [ \"tr\" ] ], [ \"tbody\" ] ];\n\n    // remove trailing pipes, then split on pipes\n    // (no escaped pipes are allowed in horizontal rule)\n    m[2] = m[2].replace(/\\|\\s*$/, '').split('|');\n\n    // process alignment\n    var html_attrs = [ ];\n    forEach (m[2], function (s) {\n        if (s.match(/^\\s*-+:\\s*$/))       html_attrs.push({align: \"right\"});\n        else if (s.match(/^\\s*:-+\\s*$/))  html_attrs.push({align: \"left\"});\n        else if (s.match(/^\\s*:-+:\\s*$/)) html_attrs.push({align: \"center\"});\n        else                              html_attrs.push({});\n    });\n\n    // now for the header, avoid escaped pipes\n    m[1] = _split_on_unescaped(m[1].replace(/\\|\\s*$/, ''), '|');\n    for (i = 0; i < m[1].length; i++) {\n        table[1][1].push(['th', html_attrs[i] || {}].concat(\n            this.processInline(m[1][i].trim())));\n    }\n\n    // now for body contents\n    forEach (m[3].replace(/\\|\\s*$/mg, '').split('\\n'), function (row) {\n        var html_row = ['tr'];\n        row = _split_on_unescaped(row, '|');\n        for (i = 0; i < row.length; i++) {\n            html_row.push(['td', html_attrs[i] || {}].concat(this.processInline(row[i].trim())));\n        }\n        table[2].push(html_row);\n    }, this);\n\n    return [table];\n}\n\nMarkdown.dialects.Maruku.inline[ \"{:\" ] = function inline_meta( text, matches, out ) {\n  if ( !out.length ) {\n    return [ 2, \"{:\" ];\n  }\n\n  // get the preceeding element\n  var before = out[ out.length - 1 ];\n\n  if ( typeof before === \"string\" ) {\n    return [ 2, \"{:\" ];\n  }\n\n  // match a meta hash\n  var m = text.match( /^\\{:\\s*((?:\\\\\\}|[^\\}])*)\\s*\\}/ );\n\n  // no match, false alarm\n  if ( !m ) {\n    return [ 2, \"{:\" ];\n  }\n\n  // attach the attributes to the preceeding element\n  var meta = this.dialect.processMetaHash( m[ 1 ] ),\n      attr = extract_attr( before );\n\n  if ( !attr ) {\n    attr = {};\n    before.splice( 1, 0, attr );\n  }\n\n  for ( var k in meta ) {\n    attr[ k ] = meta[ k ];\n  }\n\n  // cut out the string and replace it with nothing\n  return [ m[ 0 ].length, \"\" ];\n};\n\nMarkdown.dialects.Maruku.inline.__escape__ = /^\\\\[\\\\`\\*_{}\\[\\]()#\\+.!\\-|:]/;\n\nMarkdown.buildBlockOrder ( Markdown.dialects.Maruku.block );\nMarkdown.buildInlinePatterns( Markdown.dialects.Maruku.inline );\n\nvar isArray = Array.isArray || function(obj) {\n  return Object.prototype.toString.call(obj) == \"[object Array]\";\n};\n\nvar forEach;\n// Don't mess with Array.prototype. Its not friendly\nif ( Array.prototype.forEach ) {\n  forEach = function( arr, cb, thisp ) {\n    return arr.forEach( cb, thisp );\n  };\n}\nelse {\n  forEach = function(arr, cb, thisp) {\n    for (var i = 0; i < arr.length; i++) {\n      cb.call(thisp || arr, arr[i], i, arr);\n    }\n  }\n}\n\nvar isEmpty = function( obj ) {\n  for ( var key in obj ) {\n    if ( hasOwnProperty.call( obj, key ) ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction extract_attr( jsonml ) {\n  return isArray(jsonml)\n      && jsonml.length > 1\n      && typeof jsonml[ 1 ] === \"object\"\n      && !( isArray(jsonml[ 1 ]) )\n      ? jsonml[ 1 ]\n      : undefined;\n}\n\n\n\n/**\n *  renderJsonML( jsonml[, options] ) -> String\n *  - jsonml (Array): JsonML array to render to XML\n *  - options (Object): options\n *\n *  Converts the given JsonML into well-formed XML.\n *\n *  The options currently understood are:\n *\n *  - root (Boolean): wether or not the root node should be included in the\n *    output, or just its children. The default `false` is to not include the\n *    root itself.\n */\nexpose.renderJsonML = function( jsonml, options ) {\n  options = options || {};\n  // include the root element in the rendered output?\n  options.root = options.root || false;\n\n  var content = [];\n\n  if ( options.root ) {\n    content.push( render_tree( jsonml ) );\n  }\n  else {\n    jsonml.shift(); // get rid of the tag\n    if ( jsonml.length && typeof jsonml[ 0 ] === \"object\" && !( jsonml[ 0 ] instanceof Array ) ) {\n      jsonml.shift(); // get rid of the attributes\n    }\n\n    while ( jsonml.length ) {\n      content.push( render_tree( jsonml.shift() ) );\n    }\n  }\n\n  return content.join( \"\\n\\n\" );\n};\n\nfunction escapeHTML( text ) {\n  return text.replace( /&/g, \"&amp;\" )\n             .replace( /</g, \"&lt;\" )\n             .replace( />/g, \"&gt;\" )\n             .replace( /\"/g, \"&quot;\" )\n             .replace( /'/g, \"&#39;\" );\n}\n\nfunction render_tree( jsonml ) {\n  // basic case\n  if ( typeof jsonml === \"string\" ) {\n    return escapeHTML( jsonml );\n  }\n\n  var tag = jsonml.shift(),\n      attributes = {},\n      content = [];\n\n  if ( jsonml.length && typeof jsonml[ 0 ] === \"object\" && !( jsonml[ 0 ] instanceof Array ) ) {\n    attributes = jsonml.shift();\n  }\n\n  while ( jsonml.length ) {\n    content.push( render_tree( jsonml.shift() ) );\n  }\n\n  var tag_attrs = \"\";\n  for ( var a in attributes ) {\n    tag_attrs += \" \" + a + '=\"' + escapeHTML( attributes[ a ] ) + '\"';\n  }\n\n  // be careful about adding whitespace here for inline elements\n  if ( tag == \"img\" || tag == \"br\" || tag == \"hr\" ) {\n    return \"<\"+ tag + tag_attrs + \"/>\";\n  }\n  else {\n    return \"<\"+ tag + tag_attrs + \">\" + content.join( \"\" ) + \"</\" + tag + \">\";\n  }\n}\n\nfunction convert_tree_to_html( tree, references, options ) {\n  var i;\n  options = options || {};\n\n  // shallow clone\n  var jsonml = tree.slice( 0 );\n\n  if ( typeof options.preprocessTreeNode === \"function\" ) {\n      jsonml = options.preprocessTreeNode(jsonml, references);\n  }\n\n  // Clone attributes if they exist\n  var attrs = extract_attr( jsonml );\n  if ( attrs ) {\n    jsonml[ 1 ] = {};\n    for ( i in attrs ) {\n      jsonml[ 1 ][ i ] = attrs[ i ];\n    }\n    attrs = jsonml[ 1 ];\n  }\n\n  // basic case\n  if ( typeof jsonml === \"string\" ) {\n    return jsonml;\n  }\n\n  // convert this node\n  switch ( jsonml[ 0 ] ) {\n    case \"header\":\n      jsonml[ 0 ] = \"h\" + jsonml[ 1 ].level;\n      delete jsonml[ 1 ].level;\n      break;\n    case \"bulletlist\":\n      jsonml[ 0 ] = \"ul\";\n      break;\n    case \"numberlist\":\n      jsonml[ 0 ] = \"ol\";\n      break;\n    case \"listitem\":\n      jsonml[ 0 ] = \"li\";\n      break;\n    case \"para\":\n      jsonml[ 0 ] = \"p\";\n      break;\n    case \"markdown\":\n      jsonml[ 0 ] = \"html\";\n      if ( attrs ) delete attrs.references;\n      break;\n    case \"code_block\":\n      jsonml[ 0 ] = \"pre\";\n      i = attrs ? 2 : 1;\n      var code = [ \"code\" ];\n      code.push.apply( code, jsonml.splice( i, jsonml.length - i ) );\n      jsonml[ i ] = code;\n      break;\n    case \"inlinecode\":\n      jsonml[ 0 ] = \"code\";\n      break;\n    case \"img\":\n      jsonml[ 1 ].src = jsonml[ 1 ].href;\n      delete jsonml[ 1 ].href;\n      break;\n    case \"linebreak\":\n      jsonml[ 0 ] = \"br\";\n    break;\n    case \"link\":\n      jsonml[ 0 ] = \"a\";\n      break;\n    case \"link_ref\":\n      jsonml[ 0 ] = \"a\";\n\n      // grab this ref and clean up the attribute node\n      var ref = references[ attrs.ref ];\n\n      // if the reference exists, make the link\n      if ( ref ) {\n        delete attrs.ref;\n\n        // add in the href and title, if present\n        attrs.href = ref.href;\n        if ( ref.title ) {\n          attrs.title = ref.title;\n        }\n\n        // get rid of the unneeded original text\n        delete attrs.original;\n      }\n      // the reference doesn't exist, so revert to plain text\n      else {\n        return attrs.original;\n      }\n      break;\n    case \"img_ref\":\n      jsonml[ 0 ] = \"img\";\n\n      // grab this ref and clean up the attribute node\n      var ref = references[ attrs.ref ];\n\n      // if the reference exists, make the link\n      if ( ref ) {\n        delete attrs.ref;\n\n        // add in the href and title, if present\n        attrs.src = ref.href;\n        if ( ref.title ) {\n          attrs.title = ref.title;\n        }\n\n        // get rid of the unneeded original text\n        delete attrs.original;\n      }\n      // the reference doesn't exist, so revert to plain text\n      else {\n        return attrs.original;\n      }\n      break;\n  }\n\n  // convert all the children\n  i = 1;\n\n  // deal with the attribute node, if it exists\n  if ( attrs ) {\n    // if there are keys, skip over it\n    for ( var key in jsonml[ 1 ] ) {\n        i = 2;\n        break;\n    }\n    // if there aren't, remove it\n    if ( i === 1 ) {\n      jsonml.splice( i, 1 );\n    }\n  }\n\n  for ( ; i < jsonml.length; ++i ) {\n    jsonml[ i ] = convert_tree_to_html( jsonml[ i ], references, options );\n  }\n\n  return jsonml;\n}\n\n\n// merges adjacent text nodes into a single node\nfunction merge_text_nodes( jsonml ) {\n  // skip the tag name and attribute hash\n  var i = extract_attr( jsonml ) ? 2 : 1;\n\n  while ( i < jsonml.length ) {\n    // if it's a string check the next item too\n    if ( typeof jsonml[ i ] === \"string\" ) {\n      if ( i + 1 < jsonml.length && typeof jsonml[ i + 1 ] === \"string\" ) {\n        // merge the second string into the first and remove it\n        jsonml[ i ] += jsonml.splice( i + 1, 1 )[ 0 ];\n      }\n      else {\n        ++i;\n      }\n    }\n    // if it's not a string recurse\n    else {\n      merge_text_nodes( jsonml[ i ] );\n      ++i;\n    }\n  }\n}\n\n} )( (function() {\n  if ( false ) {\n    window.markdown = {};\n    return window.markdown;\n  }\n  else {\n    return exports;\n  }\n} )() );\n\n\n/***/ }),\n\n/***/ 189:\n/***/ (function(module, exports) {\n\nif (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n\n\n/***/ }),\n\n/***/ 239:\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(173)(true);\n// imports\n\n\n// module\nexports.push([module.i, \"\", \"\", {\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"file\":\"about.vue\",\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n/***/ }),\n\n/***/ 250:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    attrs: {\n      \"id\": \"container\"\n    }\n  }, [_c('main', {\n    attrs: {\n      \"id\": \"main\"\n    }\n  }, [_c('el-row', {\n    attrs: {\n      \"gutter\": 20\n    }\n  }, [_c('el-col', {\n    staticClass: \"cv cv-100\",\n    attrs: {\n      \"span\": 18,\n      \"id\": \"content\",\n      \"offset\": 3\n    }\n  }, [_c('div', {\n    staticClass: \"grid-content bg-purple\"\n  }, [_c('el-card', {\n    staticClass: \"box-card\"\n  }, [_c('header', {\n    staticClass: \"clearfix\",\n    attrs: {\n      \"id\": \"panel-header\"\n    },\n    slot: \"header\"\n  }, [_c('span', [_vm._v(\"关于\")])]), _vm._v(\" \"), _c('main', [(_vm.aboutContent) ? _c('section', {\n    staticClass: \"markdown-body\",\n    domProps: {\n      \"innerHTML\": _vm._s(_vm.aboutContent)\n    }\n  }) : _vm._e()])])], 1)])], 1)], 1)])\n},staticRenderFns: []}\n\n/***/ }),\n\n/***/ 259:\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(239);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(174)(\"1c1f73f6\", content, true);\n\n/***/ }),\n\n/***/ 263:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_header_vue__ = __webpack_require__(66);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_header_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__components_header_vue__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_markdown__ = __webpack_require__(187);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_markdown___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_markdown__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__assets_about_md__ = __webpack_require__(271);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__assets_about_md___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__assets_about_md__);\n\n\n\n\n\n\nvar markdown = __WEBPACK_IMPORTED_MODULE_1_markdown___default.a.markdown;\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    data: function data() {\n        return {\n            aboutContent: \"\"\n        };\n    },\n\n    computed: {},\n    created: function created() {\n        this.fetchAboutPage();\n    },\n    mounted: function mounted() {},\n\n    methods: {\n        fetchAboutPage: function fetchAboutPage() {\n            var _this = this;\n\n            this.setLoading(true);\n            var self = this;\n            $.get(__WEBPACK_IMPORTED_MODULE_2__assets_about_md___default.a).done(function (res) {\n                _this.setLoading(false);\n                if (!res) {\n                    return;\n                }\n                var html = markdown.toHTML(res);\n                self.aboutContent = html;\n            }).fail(function (error) {\n                _this.setLoading(false);\n            });\n        },\n        setLoading: function setLoading(state) {\n            this.$store.commit(\"setLoading\", state);\n        }\n    },\n    components: {\n        cvHead: __WEBPACK_IMPORTED_MODULE_0__components_header_vue___default.a\n    }\n});\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(22)))\n\n/***/ }),\n\n/***/ 271:\n/***/ (function(module, exports) {\n\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/5.d9880197652183191545.js","function injectStyle (ssrContext) {\n  require(\"!!../../node_modules/.2.1.0@extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../node_modules/.12.1.0@vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-f9f28b26\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../../node_modules/.12.1.0@vue-loader/lib/selector?type=styles&index=0!./about.vue\")\n}\nvar Component = require(\"!../../node_modules/.12.1.0@vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../../node_modules/.12.1.0@vue-loader/lib/selector?type=script&index=0!./about.vue\"),\n  /* template */\n  require(\"!!../../node_modules/.12.1.0@vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-f9f28b26\\\"}!../../node_modules/.12.1.0@vue-loader/lib/selector?type=template&index=0!./about.vue\"),\n  /* styles */\n  injectStyle,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/about.vue\n// module id = 175\n// module chunks = 5","module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/.0.10.3@util/support/isBufferBrowser.js\n// module id = 184\n// module chunks = 0 1 5 6","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/.0.10.3@util/util.js\n// module id = 185\n// module chunks = 0 1 5 6","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/.0.11.10@process/browser.js\n// module id = 186\n// module chunks = 0 1 5 6","// super simple module for the most common nodejs use case.\nexports.markdown = require(\"./markdown\");\nexports.parse = exports.markdown.toHTML;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/.0.5.0@markdown/lib/index.js\n// module id = 187\n// module chunks = 0 1 5 6","// Released under MIT license\n// Copyright (c) 2009-2010 Dominic Baggott\n// Copyright (c) 2009-2010 Ash Berlin\n// Copyright (c) 2011 Christoph Dorn <christoph@christophdorn.com> (http://www.christophdorn.com)\n\n/*jshint browser:true, devel:true */\n\n(function( expose ) {\n\n/**\n *  class Markdown\n *\n *  Markdown processing in Javascript done right. We have very particular views\n *  on what constitutes 'right' which include:\n *\n *  - produces well-formed HTML (this means that em and strong nesting is\n *    important)\n *\n *  - has an intermediate representation to allow processing of parsed data (We\n *    in fact have two, both as [JsonML]: a markdown tree and an HTML tree).\n *\n *  - is easily extensible to add new dialects without having to rewrite the\n *    entire parsing mechanics\n *\n *  - has a good test suite\n *\n *  This implementation fulfills all of these (except that the test suite could\n *  do with expanding to automatically run all the fixtures from other Markdown\n *  implementations.)\n *\n *  ##### Intermediate Representation\n *\n *  *TODO* Talk about this :) Its JsonML, but document the node names we use.\n *\n *  [JsonML]: http://jsonml.org/ \"JSON Markup Language\"\n **/\nvar Markdown = expose.Markdown = function(dialect) {\n  switch (typeof dialect) {\n    case \"undefined\":\n      this.dialect = Markdown.dialects.Gruber;\n      break;\n    case \"object\":\n      this.dialect = dialect;\n      break;\n    default:\n      if ( dialect in Markdown.dialects ) {\n        this.dialect = Markdown.dialects[dialect];\n      }\n      else {\n        throw new Error(\"Unknown Markdown dialect '\" + String(dialect) + \"'\");\n      }\n      break;\n  }\n  this.em_state = [];\n  this.strong_state = [];\n  this.debug_indent = \"\";\n};\n\n/**\n *  parse( markdown, [dialect] ) -> JsonML\n *  - markdown (String): markdown string to parse\n *  - dialect (String | Dialect): the dialect to use, defaults to gruber\n *\n *  Parse `markdown` and return a markdown document as a Markdown.JsonML tree.\n **/\nexpose.parse = function( source, dialect ) {\n  // dialect will default if undefined\n  var md = new Markdown( dialect );\n  return md.toTree( source );\n};\n\n/**\n *  toHTML( markdown, [dialect]  ) -> String\n *  toHTML( md_tree ) -> String\n *  - markdown (String): markdown string to parse\n *  - md_tree (Markdown.JsonML): parsed markdown tree\n *\n *  Take markdown (either as a string or as a JsonML tree) and run it through\n *  [[toHTMLTree]] then turn it into a well-formated HTML fragment.\n **/\nexpose.toHTML = function toHTML( source , dialect , options ) {\n  var input = expose.toHTMLTree( source , dialect , options );\n\n  return expose.renderJsonML( input );\n};\n\n/**\n *  toHTMLTree( markdown, [dialect] ) -> JsonML\n *  toHTMLTree( md_tree ) -> JsonML\n *  - markdown (String): markdown string to parse\n *  - dialect (String | Dialect): the dialect to use, defaults to gruber\n *  - md_tree (Markdown.JsonML): parsed markdown tree\n *\n *  Turn markdown into HTML, represented as a JsonML tree. If a string is given\n *  to this function, it is first parsed into a markdown tree by calling\n *  [[parse]].\n **/\nexpose.toHTMLTree = function toHTMLTree( input, dialect , options ) {\n  // convert string input to an MD tree\n  if ( typeof input ===\"string\" ) input = this.parse( input, dialect );\n\n  // Now convert the MD tree to an HTML tree\n\n  // remove references from the tree\n  var attrs = extract_attr( input ),\n      refs = {};\n\n  if ( attrs && attrs.references ) {\n    refs = attrs.references;\n  }\n\n  var html = convert_tree_to_html( input, refs , options );\n  merge_text_nodes( html );\n  return html;\n};\n\n// For Spidermonkey based engines\nfunction mk_block_toSource() {\n  return \"Markdown.mk_block( \" +\n          uneval(this.toString()) +\n          \", \" +\n          uneval(this.trailing) +\n          \", \" +\n          uneval(this.lineNumber) +\n          \" )\";\n}\n\n// node\nfunction mk_block_inspect() {\n  var util = require(\"util\");\n  return \"Markdown.mk_block( \" +\n          util.inspect(this.toString()) +\n          \", \" +\n          util.inspect(this.trailing) +\n          \", \" +\n          util.inspect(this.lineNumber) +\n          \" )\";\n\n}\n\nvar mk_block = Markdown.mk_block = function(block, trail, line) {\n  // Be helpful for default case in tests.\n  if ( arguments.length == 1 ) trail = \"\\n\\n\";\n\n  var s = new String(block);\n  s.trailing = trail;\n  // To make it clear its not just a string\n  s.inspect = mk_block_inspect;\n  s.toSource = mk_block_toSource;\n\n  if ( line != undefined )\n    s.lineNumber = line;\n\n  return s;\n};\n\nfunction count_lines( str ) {\n  var n = 0, i = -1;\n  while ( ( i = str.indexOf(\"\\n\", i + 1) ) !== -1 ) n++;\n  return n;\n}\n\n// Internal - split source into rough blocks\nMarkdown.prototype.split_blocks = function splitBlocks( input, startLine ) {\n  input = input.replace(/(\\r\\n|\\n|\\r)/g, \"\\n\");\n  // [\\s\\S] matches _anything_ (newline or space)\n  // [^] is equivalent but doesn't work in IEs.\n  var re = /([\\s\\S]+?)($|\\n#|\\n(?:\\s*\\n|$)+)/g,\n      blocks = [],\n      m;\n\n  var line_no = 1;\n\n  if ( ( m = /^(\\s*\\n)/.exec(input) ) != null ) {\n    // skip (but count) leading blank lines\n    line_no += count_lines( m[0] );\n    re.lastIndex = m[0].length;\n  }\n\n  while ( ( m = re.exec(input) ) !== null ) {\n    if (m[2] == \"\\n#\") {\n      m[2] = \"\\n\";\n      re.lastIndex--;\n    }\n    blocks.push( mk_block( m[1], m[2], line_no ) );\n    line_no += count_lines( m[0] );\n  }\n\n  return blocks;\n};\n\n/**\n *  Markdown#processBlock( block, next ) -> undefined | [ JsonML, ... ]\n *  - block (String): the block to process\n *  - next (Array): the following blocks\n *\n * Process `block` and return an array of JsonML nodes representing `block`.\n *\n * It does this by asking each block level function in the dialect to process\n * the block until one can. Succesful handling is indicated by returning an\n * array (with zero or more JsonML nodes), failure by a false value.\n *\n * Blocks handlers are responsible for calling [[Markdown#processInline]]\n * themselves as appropriate.\n *\n * If the blocks were split incorrectly or adjacent blocks need collapsing you\n * can adjust `next` in place using shift/splice etc.\n *\n * If any of this default behaviour is not right for the dialect, you can\n * define a `__call__` method on the dialect that will get invoked to handle\n * the block processing.\n */\nMarkdown.prototype.processBlock = function processBlock( block, next ) {\n  var cbs = this.dialect.block,\n      ord = cbs.__order__;\n\n  if ( \"__call__\" in cbs ) {\n    return cbs.__call__.call(this, block, next);\n  }\n\n  for ( var i = 0; i < ord.length; i++ ) {\n    //D:this.debug( \"Testing\", ord[i] );\n    var res = cbs[ ord[i] ].call( this, block, next );\n    if ( res ) {\n      //D:this.debug(\"  matched\");\n      if ( !isArray(res) || ( res.length > 0 && !( isArray(res[0]) ) ) )\n        this.debug(ord[i], \"didn't return a proper array\");\n      //D:this.debug( \"\" );\n      return res;\n    }\n  }\n\n  // Uhoh! no match! Should we throw an error?\n  return [];\n};\n\nMarkdown.prototype.processInline = function processInline( block ) {\n  return this.dialect.inline.__call__.call( this, String( block ) );\n};\n\n/**\n *  Markdown#toTree( source ) -> JsonML\n *  - source (String): markdown source to parse\n *\n *  Parse `source` into a JsonML tree representing the markdown document.\n **/\n// custom_tree means set this.tree to `custom_tree` and restore old value on return\nMarkdown.prototype.toTree = function toTree( source, custom_root ) {\n  var blocks = source instanceof Array ? source : this.split_blocks( source );\n\n  // Make tree a member variable so its easier to mess with in extensions\n  var old_tree = this.tree;\n  try {\n    this.tree = custom_root || this.tree || [ \"markdown\" ];\n\n    blocks:\n    while ( blocks.length ) {\n      var b = this.processBlock( blocks.shift(), blocks );\n\n      // Reference blocks and the like won't return any content\n      if ( !b.length ) continue blocks;\n\n      this.tree.push.apply( this.tree, b );\n    }\n    return this.tree;\n  }\n  finally {\n    if ( custom_root ) {\n      this.tree = old_tree;\n    }\n  }\n};\n\n// Noop by default\nMarkdown.prototype.debug = function () {\n  var args = Array.prototype.slice.call( arguments);\n  args.unshift(this.debug_indent);\n  if ( typeof print !== \"undefined\" )\n      print.apply( print, args );\n  if ( typeof console !== \"undefined\" && typeof console.log !== \"undefined\" )\n      console.log.apply( null, args );\n}\n\nMarkdown.prototype.loop_re_over_block = function( re, block, cb ) {\n  // Dont use /g regexps with this\n  var m,\n      b = block.valueOf();\n\n  while ( b.length && (m = re.exec(b) ) != null ) {\n    b = b.substr( m[0].length );\n    cb.call(this, m);\n  }\n  return b;\n};\n\n/**\n * Markdown.dialects\n *\n * Namespace of built-in dialects.\n **/\nMarkdown.dialects = {};\n\n/**\n * Markdown.dialects.Gruber\n *\n * The default dialect that follows the rules set out by John Gruber's\n * markdown.pl as closely as possible. Well actually we follow the behaviour of\n * that script which in some places is not exactly what the syntax web page\n * says.\n **/\nMarkdown.dialects.Gruber = {\n  block: {\n    atxHeader: function atxHeader( block, next ) {\n      var m = block.match( /^(#{1,6})\\s*(.*?)\\s*#*\\s*(?:\\n|$)/ );\n\n      if ( !m ) return undefined;\n\n      var header = [ \"header\", { level: m[ 1 ].length } ];\n      Array.prototype.push.apply(header, this.processInline(m[ 2 ]));\n\n      if ( m[0].length < block.length )\n        next.unshift( mk_block( block.substr( m[0].length ), block.trailing, block.lineNumber + 2 ) );\n\n      return [ header ];\n    },\n\n    setextHeader: function setextHeader( block, next ) {\n      var m = block.match( /^(.*)\\n([-=])\\2\\2+(?:\\n|$)/ );\n\n      if ( !m ) return undefined;\n\n      var level = ( m[ 2 ] === \"=\" ) ? 1 : 2;\n      var header = [ \"header\", { level : level }, m[ 1 ] ];\n\n      if ( m[0].length < block.length )\n        next.unshift( mk_block( block.substr( m[0].length ), block.trailing, block.lineNumber + 2 ) );\n\n      return [ header ];\n    },\n\n    code: function code( block, next ) {\n      // |    Foo\n      // |bar\n      // should be a code block followed by a paragraph. Fun\n      //\n      // There might also be adjacent code block to merge.\n\n      var ret = [],\n          re = /^(?: {0,3}\\t| {4})(.*)\\n?/,\n          lines;\n\n      // 4 spaces + content\n      if ( !block.match( re ) ) return undefined;\n\n      block_search:\n      do {\n        // Now pull out the rest of the lines\n        var b = this.loop_re_over_block(\n                  re, block.valueOf(), function( m ) { ret.push( m[1] ); } );\n\n        if ( b.length ) {\n          // Case alluded to in first comment. push it back on as a new block\n          next.unshift( mk_block(b, block.trailing) );\n          break block_search;\n        }\n        else if ( next.length ) {\n          // Check the next block - it might be code too\n          if ( !next[0].match( re ) ) break block_search;\n\n          // Pull how how many blanks lines follow - minus two to account for .join\n          ret.push ( block.trailing.replace(/[^\\n]/g, \"\").substring(2) );\n\n          block = next.shift();\n        }\n        else {\n          break block_search;\n        }\n      } while ( true );\n\n      return [ [ \"code_block\", ret.join(\"\\n\") ] ];\n    },\n\n    horizRule: function horizRule( block, next ) {\n      // this needs to find any hr in the block to handle abutting blocks\n      var m = block.match( /^(?:([\\s\\S]*?)\\n)?[ \\t]*([-_*])(?:[ \\t]*\\2){2,}[ \\t]*(?:\\n([\\s\\S]*))?$/ );\n\n      if ( !m ) {\n        return undefined;\n      }\n\n      var jsonml = [ [ \"hr\" ] ];\n\n      // if there's a leading abutting block, process it\n      if ( m[ 1 ] ) {\n        jsonml.unshift.apply( jsonml, this.processBlock( m[ 1 ], [] ) );\n      }\n\n      // if there's a trailing abutting block, stick it into next\n      if ( m[ 3 ] ) {\n        next.unshift( mk_block( m[ 3 ] ) );\n      }\n\n      return jsonml;\n    },\n\n    // There are two types of lists. Tight and loose. Tight lists have no whitespace\n    // between the items (and result in text just in the <li>) and loose lists,\n    // which have an empty line between list items, resulting in (one or more)\n    // paragraphs inside the <li>.\n    //\n    // There are all sorts weird edge cases about the original markdown.pl's\n    // handling of lists:\n    //\n    // * Nested lists are supposed to be indented by four chars per level. But\n    //   if they aren't, you can get a nested list by indenting by less than\n    //   four so long as the indent doesn't match an indent of an existing list\n    //   item in the 'nest stack'.\n    //\n    // * The type of the list (bullet or number) is controlled just by the\n    //    first item at the indent. Subsequent changes are ignored unless they\n    //    are for nested lists\n    //\n    lists: (function( ) {\n      // Use a closure to hide a few variables.\n      var any_list = \"[*+-]|\\\\d+\\\\.\",\n          bullet_list = /[*+-]/,\n          number_list = /\\d+\\./,\n          // Capture leading indent as it matters for determining nested lists.\n          is_list_re = new RegExp( \"^( {0,3})(\" + any_list + \")[ \\t]+\" ),\n          indent_re = \"(?: {0,3}\\\\t| {4})\";\n\n      // TODO: Cache this regexp for certain depths.\n      // Create a regexp suitable for matching an li for a given stack depth\n      function regex_for_depth( depth ) {\n\n        return new RegExp(\n          // m[1] = indent, m[2] = list_type\n          \"(?:^(\" + indent_re + \"{0,\" + depth + \"} {0,3})(\" + any_list + \")\\\\s+)|\" +\n          // m[3] = cont\n          \"(^\" + indent_re + \"{0,\" + (depth-1) + \"}[ ]{0,4})\"\n        );\n      }\n      function expand_tab( input ) {\n        return input.replace( / {0,3}\\t/g, \"    \" );\n      }\n\n      // Add inline content `inline` to `li`. inline comes from processInline\n      // so is an array of content\n      function add(li, loose, inline, nl) {\n        if ( loose ) {\n          li.push( [ \"para\" ].concat(inline) );\n          return;\n        }\n        // Hmmm, should this be any block level element or just paras?\n        var add_to = li[li.length -1] instanceof Array && li[li.length - 1][0] == \"para\"\n                   ? li[li.length -1]\n                   : li;\n\n        // If there is already some content in this list, add the new line in\n        if ( nl && li.length > 1 ) inline.unshift(nl);\n\n        for ( var i = 0; i < inline.length; i++ ) {\n          var what = inline[i],\n              is_str = typeof what == \"string\";\n          if ( is_str && add_to.length > 1 && typeof add_to[add_to.length-1] == \"string\" ) {\n            add_to[ add_to.length-1 ] += what;\n          }\n          else {\n            add_to.push( what );\n          }\n        }\n      }\n\n      // contained means have an indent greater than the current one. On\n      // *every* line in the block\n      function get_contained_blocks( depth, blocks ) {\n\n        var re = new RegExp( \"^(\" + indent_re + \"{\" + depth + \"}.*?\\\\n?)*$\" ),\n            replace = new RegExp(\"^\" + indent_re + \"{\" + depth + \"}\", \"gm\"),\n            ret = [];\n\n        while ( blocks.length > 0 ) {\n          if ( re.exec( blocks[0] ) ) {\n            var b = blocks.shift(),\n                // Now remove that indent\n                x = b.replace( replace, \"\");\n\n            ret.push( mk_block( x, b.trailing, b.lineNumber ) );\n          }\n          else {\n            break;\n          }\n        }\n        return ret;\n      }\n\n      // passed to stack.forEach to turn list items up the stack into paras\n      function paragraphify(s, i, stack) {\n        var list = s.list;\n        var last_li = list[list.length-1];\n\n        if ( last_li[1] instanceof Array && last_li[1][0] == \"para\" ) {\n          return;\n        }\n        if ( i + 1 == stack.length ) {\n          // Last stack frame\n          // Keep the same array, but replace the contents\n          last_li.push( [\"para\"].concat( last_li.splice(1, last_li.length - 1) ) );\n        }\n        else {\n          var sublist = last_li.pop();\n          last_li.push( [\"para\"].concat( last_li.splice(1, last_li.length - 1) ), sublist );\n        }\n      }\n\n      // The matcher function\n      return function( block, next ) {\n        var m = block.match( is_list_re );\n        if ( !m ) return undefined;\n\n        function make_list( m ) {\n          var list = bullet_list.exec( m[2] )\n                   ? [\"bulletlist\"]\n                   : [\"numberlist\"];\n\n          stack.push( { list: list, indent: m[1] } );\n          return list;\n        }\n\n\n        var stack = [], // Stack of lists for nesting.\n            list = make_list( m ),\n            last_li,\n            loose = false,\n            ret = [ stack[0].list ],\n            i;\n\n        // Loop to search over block looking for inner block elements and loose lists\n        loose_search:\n        while ( true ) {\n          // Split into lines preserving new lines at end of line\n          var lines = block.split( /(?=\\n)/ );\n\n          // We have to grab all lines for a li and call processInline on them\n          // once as there are some inline things that can span lines.\n          var li_accumulate = \"\";\n\n          // Loop over the lines in this block looking for tight lists.\n          tight_search:\n          for ( var line_no = 0; line_no < lines.length; line_no++ ) {\n            var nl = \"\",\n                l = lines[line_no].replace(/^\\n/, function(n) { nl = n; return \"\"; });\n\n            // TODO: really should cache this\n            var line_re = regex_for_depth( stack.length );\n\n            m = l.match( line_re );\n            //print( \"line:\", uneval(l), \"\\nline match:\", uneval(m) );\n\n            // We have a list item\n            if ( m[1] !== undefined ) {\n              // Process the previous list item, if any\n              if ( li_accumulate.length ) {\n                add( last_li, loose, this.processInline( li_accumulate ), nl );\n                // Loose mode will have been dealt with. Reset it\n                loose = false;\n                li_accumulate = \"\";\n              }\n\n              m[1] = expand_tab( m[1] );\n              var wanted_depth = Math.floor(m[1].length/4)+1;\n              //print( \"want:\", wanted_depth, \"stack:\", stack.length);\n              if ( wanted_depth > stack.length ) {\n                // Deep enough for a nested list outright\n                //print ( \"new nested list\" );\n                list = make_list( m );\n                last_li.push( list );\n                last_li = list[1] = [ \"listitem\" ];\n              }\n              else {\n                // We aren't deep enough to be strictly a new level. This is\n                // where Md.pl goes nuts. If the indent matches a level in the\n                // stack, put it there, else put it one deeper then the\n                // wanted_depth deserves.\n                var found = false;\n                for ( i = 0; i < stack.length; i++ ) {\n                  if ( stack[ i ].indent != m[1] ) continue;\n                  list = stack[ i ].list;\n                  stack.splice( i+1, stack.length - (i+1) );\n                  found = true;\n                  break;\n                }\n\n                if (!found) {\n                  //print(\"not found. l:\", uneval(l));\n                  wanted_depth++;\n                  if ( wanted_depth <= stack.length ) {\n                    stack.splice(wanted_depth, stack.length - wanted_depth);\n                    //print(\"Desired depth now\", wanted_depth, \"stack:\", stack.length);\n                    list = stack[wanted_depth-1].list;\n                    //print(\"list:\", uneval(list) );\n                  }\n                  else {\n                    //print (\"made new stack for messy indent\");\n                    list = make_list(m);\n                    last_li.push(list);\n                  }\n                }\n\n                //print( uneval(list), \"last\", list === stack[stack.length-1].list );\n                last_li = [ \"listitem\" ];\n                list.push(last_li);\n              } // end depth of shenegains\n              nl = \"\";\n            }\n\n            // Add content\n            if ( l.length > m[0].length ) {\n              li_accumulate += nl + l.substr( m[0].length );\n            }\n          } // tight_search\n\n          if ( li_accumulate.length ) {\n            add( last_li, loose, this.processInline( li_accumulate ), nl );\n            // Loose mode will have been dealt with. Reset it\n            loose = false;\n            li_accumulate = \"\";\n          }\n\n          // Look at the next block - we might have a loose list. Or an extra\n          // paragraph for the current li\n          var contained = get_contained_blocks( stack.length, next );\n\n          // Deal with code blocks or properly nested lists\n          if ( contained.length > 0 ) {\n            // Make sure all listitems up the stack are paragraphs\n            forEach( stack, paragraphify, this);\n\n            last_li.push.apply( last_li, this.toTree( contained, [] ) );\n          }\n\n          var next_block = next[0] && next[0].valueOf() || \"\";\n\n          if ( next_block.match(is_list_re) || next_block.match( /^ / ) ) {\n            block = next.shift();\n\n            // Check for an HR following a list: features/lists/hr_abutting\n            var hr = this.dialect.block.horizRule( block, next );\n\n            if ( hr ) {\n              ret.push.apply(ret, hr);\n              break;\n            }\n\n            // Make sure all listitems up the stack are paragraphs\n            forEach( stack, paragraphify, this);\n\n            loose = true;\n            continue loose_search;\n          }\n          break;\n        } // loose_search\n\n        return ret;\n      };\n    })(),\n\n    blockquote: function blockquote( block, next ) {\n      if ( !block.match( /^>/m ) )\n        return undefined;\n\n      var jsonml = [];\n\n      // separate out the leading abutting block, if any. I.e. in this case:\n      //\n      //  a\n      //  > b\n      //\n      if ( block[ 0 ] != \">\" ) {\n        var lines = block.split( /\\n/ ),\n            prev = [],\n            line_no = block.lineNumber;\n\n        // keep shifting lines until you find a crotchet\n        while ( lines.length && lines[ 0 ][ 0 ] != \">\" ) {\n            prev.push( lines.shift() );\n            line_no++;\n        }\n\n        var abutting = mk_block( prev.join( \"\\n\" ), \"\\n\", block.lineNumber );\n        jsonml.push.apply( jsonml, this.processBlock( abutting, [] ) );\n        // reassemble new block of just block quotes!\n        block = mk_block( lines.join( \"\\n\" ), block.trailing, line_no );\n      }\n\n\n      // if the next block is also a blockquote merge it in\n      while ( next.length && next[ 0 ][ 0 ] == \">\" ) {\n        var b = next.shift();\n        block = mk_block( block + block.trailing + b, b.trailing, block.lineNumber );\n      }\n\n      // Strip off the leading \"> \" and re-process as a block.\n      var input = block.replace( /^> ?/gm, \"\" ),\n          old_tree = this.tree,\n          processedBlock = this.toTree( input, [ \"blockquote\" ] ),\n          attr = extract_attr( processedBlock );\n\n      // If any link references were found get rid of them\n      if ( attr && attr.references ) {\n        delete attr.references;\n        // And then remove the attribute object if it's empty\n        if ( isEmpty( attr ) ) {\n          processedBlock.splice( 1, 1 );\n        }\n      }\n\n      jsonml.push( processedBlock );\n      return jsonml;\n    },\n\n    referenceDefn: function referenceDefn( block, next) {\n      var re = /^\\s*\\[(.*?)\\]:\\s*(\\S+)(?:\\s+(?:(['\"])(.*?)\\3|\\((.*?)\\)))?\\n?/;\n      // interesting matches are [ , ref_id, url, , title, title ]\n\n      if ( !block.match(re) )\n        return undefined;\n\n      // make an attribute node if it doesn't exist\n      if ( !extract_attr( this.tree ) ) {\n        this.tree.splice( 1, 0, {} );\n      }\n\n      var attrs = extract_attr( this.tree );\n\n      // make a references hash if it doesn't exist\n      if ( attrs.references === undefined ) {\n        attrs.references = {};\n      }\n\n      var b = this.loop_re_over_block(re, block, function( m ) {\n\n        if ( m[2] && m[2][0] == \"<\" && m[2][m[2].length-1] == \">\" )\n          m[2] = m[2].substring( 1, m[2].length - 1 );\n\n        var ref = attrs.references[ m[1].toLowerCase() ] = {\n          href: m[2]\n        };\n\n        if ( m[4] !== undefined )\n          ref.title = m[4];\n        else if ( m[5] !== undefined )\n          ref.title = m[5];\n\n      } );\n\n      if ( b.length )\n        next.unshift( mk_block( b, block.trailing ) );\n\n      return [];\n    },\n\n    para: function para( block, next ) {\n      // everything's a para!\n      return [ [\"para\"].concat( this.processInline( block ) ) ];\n    }\n  }\n};\n\nMarkdown.dialects.Gruber.inline = {\n\n    __oneElement__: function oneElement( text, patterns_or_re, previous_nodes ) {\n      var m,\n          res,\n          lastIndex = 0;\n\n      patterns_or_re = patterns_or_re || this.dialect.inline.__patterns__;\n      var re = new RegExp( \"([\\\\s\\\\S]*?)(\" + (patterns_or_re.source || patterns_or_re) + \")\" );\n\n      m = re.exec( text );\n      if (!m) {\n        // Just boring text\n        return [ text.length, text ];\n      }\n      else if ( m[1] ) {\n        // Some un-interesting text matched. Return that first\n        return [ m[1].length, m[1] ];\n      }\n\n      var res;\n      if ( m[2] in this.dialect.inline ) {\n        res = this.dialect.inline[ m[2] ].call(\n                  this,\n                  text.substr( m.index ), m, previous_nodes || [] );\n      }\n      // Default for now to make dev easier. just slurp special and output it.\n      res = res || [ m[2].length, m[2] ];\n      return res;\n    },\n\n    __call__: function inline( text, patterns ) {\n\n      var out = [],\n          res;\n\n      function add(x) {\n        //D:self.debug(\"  adding output\", uneval(x));\n        if ( typeof x == \"string\" && typeof out[out.length-1] == \"string\" )\n          out[ out.length-1 ] += x;\n        else\n          out.push(x);\n      }\n\n      while ( text.length > 0 ) {\n        res = this.dialect.inline.__oneElement__.call(this, text, patterns, out );\n        text = text.substr( res.shift() );\n        forEach(res, add )\n      }\n\n      return out;\n    },\n\n    // These characters are intersting elsewhere, so have rules for them so that\n    // chunks of plain text blocks don't include them\n    \"]\": function () {},\n    \"}\": function () {},\n\n    __escape__ : /^\\\\[\\\\`\\*_{}\\[\\]()#\\+.!\\-]/,\n\n    \"\\\\\": function escaped( text ) {\n      // [ length of input processed, node/children to add... ]\n      // Only esacape: \\ ` * _ { } [ ] ( ) # * + - . !\n      if ( this.dialect.inline.__escape__.exec( text ) )\n        return [ 2, text.charAt( 1 ) ];\n      else\n        // Not an esacpe\n        return [ 1, \"\\\\\" ];\n    },\n\n    \"![\": function image( text ) {\n\n      // Unlike images, alt text is plain text only. no other elements are\n      // allowed in there\n\n      // ![Alt text](/path/to/img.jpg \"Optional title\")\n      //      1          2            3       4         <--- captures\n      var m = text.match( /^!\\[(.*?)\\][ \\t]*\\([ \\t]*([^\")]*?)(?:[ \\t]+([\"'])(.*?)\\3)?[ \\t]*\\)/ );\n\n      if ( m ) {\n        if ( m[2] && m[2][0] == \"<\" && m[2][m[2].length-1] == \">\" )\n          m[2] = m[2].substring( 1, m[2].length - 1 );\n\n        m[2] = this.dialect.inline.__call__.call( this, m[2], /\\\\/ )[0];\n\n        var attrs = { alt: m[1], href: m[2] || \"\" };\n        if ( m[4] !== undefined)\n          attrs.title = m[4];\n\n        return [ m[0].length, [ \"img\", attrs ] ];\n      }\n\n      // ![Alt text][id]\n      m = text.match( /^!\\[(.*?)\\][ \\t]*\\[(.*?)\\]/ );\n\n      if ( m ) {\n        // We can't check if the reference is known here as it likely wont be\n        // found till after. Check it in md tree->hmtl tree conversion\n        return [ m[0].length, [ \"img_ref\", { alt: m[1], ref: m[2].toLowerCase(), original: m[0] } ] ];\n      }\n\n      // Just consume the '!['\n      return [ 2, \"![\" ];\n    },\n\n    \"[\": function link( text ) {\n\n      var orig = String(text);\n      // Inline content is possible inside `link text`\n      var res = Markdown.DialectHelpers.inline_until_char.call( this, text.substr(1), \"]\" );\n\n      // No closing ']' found. Just consume the [\n      if ( !res ) return [ 1, \"[\" ];\n\n      var consumed = 1 + res[ 0 ],\n          children = res[ 1 ],\n          link,\n          attrs;\n\n      // At this point the first [...] has been parsed. See what follows to find\n      // out which kind of link we are (reference or direct url)\n      text = text.substr( consumed );\n\n      // [link text](/path/to/img.jpg \"Optional title\")\n      //                 1            2       3         <--- captures\n      // This will capture up to the last paren in the block. We then pull\n      // back based on if there a matching ones in the url\n      //    ([here](/url/(test))\n      // The parens have to be balanced\n      var m = text.match( /^\\s*\\([ \\t]*([^\"']*)(?:[ \\t]+([\"'])(.*?)\\2)?[ \\t]*\\)/ );\n      if ( m ) {\n        var url = m[1];\n        consumed += m[0].length;\n\n        if ( url && url[0] == \"<\" && url[url.length-1] == \">\" )\n          url = url.substring( 1, url.length - 1 );\n\n        // If there is a title we don't have to worry about parens in the url\n        if ( !m[3] ) {\n          var open_parens = 1; // One open that isn't in the capture\n          for ( var len = 0; len < url.length; len++ ) {\n            switch ( url[len] ) {\n            case \"(\":\n              open_parens++;\n              break;\n            case \")\":\n              if ( --open_parens == 0) {\n                consumed -= url.length - len;\n                url = url.substring(0, len);\n              }\n              break;\n            }\n          }\n        }\n\n        // Process escapes only\n        url = this.dialect.inline.__call__.call( this, url, /\\\\/ )[0];\n\n        attrs = { href: url || \"\" };\n        if ( m[3] !== undefined)\n          attrs.title = m[3];\n\n        link = [ \"link\", attrs ].concat( children );\n        return [ consumed, link ];\n      }\n\n      // [Alt text][id]\n      // [Alt text] [id]\n      m = text.match( /^\\s*\\[(.*?)\\]/ );\n\n      if ( m ) {\n\n        consumed += m[ 0 ].length;\n\n        // [links][] uses links as its reference\n        attrs = { ref: ( m[ 1 ] || String(children) ).toLowerCase(),  original: orig.substr( 0, consumed ) };\n\n        link = [ \"link_ref\", attrs ].concat( children );\n\n        // We can't check if the reference is known here as it likely wont be\n        // found till after. Check it in md tree->hmtl tree conversion.\n        // Store the original so that conversion can revert if the ref isn't found.\n        return [ consumed, link ];\n      }\n\n      // [id]\n      // Only if id is plain (no formatting.)\n      if ( children.length == 1 && typeof children[0] == \"string\" ) {\n\n        attrs = { ref: children[0].toLowerCase(),  original: orig.substr( 0, consumed ) };\n        link = [ \"link_ref\", attrs, children[0] ];\n        return [ consumed, link ];\n      }\n\n      // Just consume the \"[\"\n      return [ 1, \"[\" ];\n    },\n\n\n    \"<\": function autoLink( text ) {\n      var m;\n\n      if ( ( m = text.match( /^<(?:((https?|ftp|mailto):[^>]+)|(.*?@.*?\\.[a-zA-Z]+))>/ ) ) != null ) {\n        if ( m[3] ) {\n          return [ m[0].length, [ \"link\", { href: \"mailto:\" + m[3] }, m[3] ] ];\n\n        }\n        else if ( m[2] == \"mailto\" ) {\n          return [ m[0].length, [ \"link\", { href: m[1] }, m[1].substr(\"mailto:\".length ) ] ];\n        }\n        else\n          return [ m[0].length, [ \"link\", { href: m[1] }, m[1] ] ];\n      }\n\n      return [ 1, \"<\" ];\n    },\n\n    \"`\": function inlineCode( text ) {\n      // Inline code block. as many backticks as you like to start it\n      // Always skip over the opening ticks.\n      var m = text.match( /(`+)(([\\s\\S]*?)\\1)/ );\n\n      if ( m && m[2] )\n        return [ m[1].length + m[2].length, [ \"inlinecode\", m[3] ] ];\n      else {\n        // TODO: No matching end code found - warn!\n        return [ 1, \"`\" ];\n      }\n    },\n\n    \"  \\n\": function lineBreak( text ) {\n      return [ 3, [ \"linebreak\" ] ];\n    }\n\n};\n\n// Meta Helper/generator method for em and strong handling\nfunction strong_em( tag, md ) {\n\n  var state_slot = tag + \"_state\",\n      other_slot = tag == \"strong\" ? \"em_state\" : \"strong_state\";\n\n  function CloseTag(len) {\n    this.len_after = len;\n    this.name = \"close_\" + md;\n  }\n\n  return function ( text, orig_match ) {\n\n    if ( this[state_slot][0] == md ) {\n      // Most recent em is of this type\n      //D:this.debug(\"closing\", md);\n      this[state_slot].shift();\n\n      // \"Consume\" everything to go back to the recrusion in the else-block below\n      return[ text.length, new CloseTag(text.length-md.length) ];\n    }\n    else {\n      // Store a clone of the em/strong states\n      var other = this[other_slot].slice(),\n          state = this[state_slot].slice();\n\n      this[state_slot].unshift(md);\n\n      //D:this.debug_indent += \"  \";\n\n      // Recurse\n      var res = this.processInline( text.substr( md.length ) );\n      //D:this.debug_indent = this.debug_indent.substr(2);\n\n      var last = res[res.length - 1];\n\n      //D:this.debug(\"processInline from\", tag + \": \", uneval( res ) );\n\n      var check = this[state_slot].shift();\n      if ( last instanceof CloseTag ) {\n        res.pop();\n        // We matched! Huzzah.\n        var consumed = text.length - last.len_after;\n        return [ consumed, [ tag ].concat(res) ];\n      }\n      else {\n        // Restore the state of the other kind. We might have mistakenly closed it.\n        this[other_slot] = other;\n        this[state_slot] = state;\n\n        // We can't reuse the processed result as it could have wrong parsing contexts in it.\n        return [ md.length, md ];\n      }\n    }\n  }; // End returned function\n}\n\nMarkdown.dialects.Gruber.inline[\"**\"] = strong_em(\"strong\", \"**\");\nMarkdown.dialects.Gruber.inline[\"__\"] = strong_em(\"strong\", \"__\");\nMarkdown.dialects.Gruber.inline[\"*\"]  = strong_em(\"em\", \"*\");\nMarkdown.dialects.Gruber.inline[\"_\"]  = strong_em(\"em\", \"_\");\n\n\n// Build default order from insertion order.\nMarkdown.buildBlockOrder = function(d) {\n  var ord = [];\n  for ( var i in d ) {\n    if ( i == \"__order__\" || i == \"__call__\" ) continue;\n    ord.push( i );\n  }\n  d.__order__ = ord;\n};\n\n// Build patterns for inline matcher\nMarkdown.buildInlinePatterns = function(d) {\n  var patterns = [];\n\n  for ( var i in d ) {\n    // __foo__ is reserved and not a pattern\n    if ( i.match( /^__.*__$/) ) continue;\n    var l = i.replace( /([\\\\.*+?|()\\[\\]{}])/g, \"\\\\$1\" )\n             .replace( /\\n/, \"\\\\n\" );\n    patterns.push( i.length == 1 ? l : \"(?:\" + l + \")\" );\n  }\n\n  patterns = patterns.join(\"|\");\n  d.__patterns__ = patterns;\n  //print(\"patterns:\", uneval( patterns ) );\n\n  var fn = d.__call__;\n  d.__call__ = function(text, pattern) {\n    if ( pattern != undefined ) {\n      return fn.call(this, text, pattern);\n    }\n    else\n    {\n      return fn.call(this, text, patterns);\n    }\n  };\n};\n\nMarkdown.DialectHelpers = {};\nMarkdown.DialectHelpers.inline_until_char = function( text, want ) {\n  var consumed = 0,\n      nodes = [];\n\n  while ( true ) {\n    if ( text.charAt( consumed ) == want ) {\n      // Found the character we were looking for\n      consumed++;\n      return [ consumed, nodes ];\n    }\n\n    if ( consumed >= text.length ) {\n      // No closing char found. Abort.\n      return null;\n    }\n\n    var res = this.dialect.inline.__oneElement__.call(this, text.substr( consumed ) );\n    consumed += res[ 0 ];\n    // Add any returned nodes.\n    nodes.push.apply( nodes, res.slice( 1 ) );\n  }\n}\n\n// Helper function to make sub-classing a dialect easier\nMarkdown.subclassDialect = function( d ) {\n  function Block() {}\n  Block.prototype = d.block;\n  function Inline() {}\n  Inline.prototype = d.inline;\n\n  return { block: new Block(), inline: new Inline() };\n};\n\nMarkdown.buildBlockOrder ( Markdown.dialects.Gruber.block );\nMarkdown.buildInlinePatterns( Markdown.dialects.Gruber.inline );\n\nMarkdown.dialects.Maruku = Markdown.subclassDialect( Markdown.dialects.Gruber );\n\nMarkdown.dialects.Maruku.processMetaHash = function processMetaHash( meta_string ) {\n  var meta = split_meta_hash( meta_string ),\n      attr = {};\n\n  for ( var i = 0; i < meta.length; ++i ) {\n    // id: #foo\n    if ( /^#/.test( meta[ i ] ) ) {\n      attr.id = meta[ i ].substring( 1 );\n    }\n    // class: .foo\n    else if ( /^\\./.test( meta[ i ] ) ) {\n      // if class already exists, append the new one\n      if ( attr[\"class\"] ) {\n        attr[\"class\"] = attr[\"class\"] + meta[ i ].replace( /./, \" \" );\n      }\n      else {\n        attr[\"class\"] = meta[ i ].substring( 1 );\n      }\n    }\n    // attribute: foo=bar\n    else if ( /\\=/.test( meta[ i ] ) ) {\n      var s = meta[ i ].split( /\\=/ );\n      attr[ s[ 0 ] ] = s[ 1 ];\n    }\n  }\n\n  return attr;\n}\n\nfunction split_meta_hash( meta_string ) {\n  var meta = meta_string.split( \"\" ),\n      parts = [ \"\" ],\n      in_quotes = false;\n\n  while ( meta.length ) {\n    var letter = meta.shift();\n    switch ( letter ) {\n      case \" \" :\n        // if we're in a quoted section, keep it\n        if ( in_quotes ) {\n          parts[ parts.length - 1 ] += letter;\n        }\n        // otherwise make a new part\n        else {\n          parts.push( \"\" );\n        }\n        break;\n      case \"'\" :\n      case '\"' :\n        // reverse the quotes and move straight on\n        in_quotes = !in_quotes;\n        break;\n      case \"\\\\\" :\n        // shift off the next letter to be used straight away.\n        // it was escaped so we'll keep it whatever it is\n        letter = meta.shift();\n      default :\n        parts[ parts.length - 1 ] += letter;\n        break;\n    }\n  }\n\n  return parts;\n}\n\nMarkdown.dialects.Maruku.block.document_meta = function document_meta( block, next ) {\n  // we're only interested in the first block\n  if ( block.lineNumber > 1 ) return undefined;\n\n  // document_meta blocks consist of one or more lines of `Key: Value\\n`\n  if ( ! block.match( /^(?:\\w+:.*\\n)*\\w+:.*$/ ) ) return undefined;\n\n  // make an attribute node if it doesn't exist\n  if ( !extract_attr( this.tree ) ) {\n    this.tree.splice( 1, 0, {} );\n  }\n\n  var pairs = block.split( /\\n/ );\n  for ( p in pairs ) {\n    var m = pairs[ p ].match( /(\\w+):\\s*(.*)$/ ),\n        key = m[ 1 ].toLowerCase(),\n        value = m[ 2 ];\n\n    this.tree[ 1 ][ key ] = value;\n  }\n\n  // document_meta produces no content!\n  return [];\n};\n\nMarkdown.dialects.Maruku.block.block_meta = function block_meta( block, next ) {\n  // check if the last line of the block is an meta hash\n  var m = block.match( /(^|\\n) {0,3}\\{:\\s*((?:\\\\\\}|[^\\}])*)\\s*\\}$/ );\n  if ( !m ) return undefined;\n\n  // process the meta hash\n  var attr = this.dialect.processMetaHash( m[ 2 ] );\n\n  var hash;\n\n  // if we matched ^ then we need to apply meta to the previous block\n  if ( m[ 1 ] === \"\" ) {\n    var node = this.tree[ this.tree.length - 1 ];\n    hash = extract_attr( node );\n\n    // if the node is a string (rather than JsonML), bail\n    if ( typeof node === \"string\" ) return undefined;\n\n    // create the attribute hash if it doesn't exist\n    if ( !hash ) {\n      hash = {};\n      node.splice( 1, 0, hash );\n    }\n\n    // add the attributes in\n    for ( a in attr ) {\n      hash[ a ] = attr[ a ];\n    }\n\n    // return nothing so the meta hash is removed\n    return [];\n  }\n\n  // pull the meta hash off the block and process what's left\n  var b = block.replace( /\\n.*$/, \"\" ),\n      result = this.processBlock( b, [] );\n\n  // get or make the attributes hash\n  hash = extract_attr( result[ 0 ] );\n  if ( !hash ) {\n    hash = {};\n    result[ 0 ].splice( 1, 0, hash );\n  }\n\n  // attach the attributes to the block\n  for ( a in attr ) {\n    hash[ a ] = attr[ a ];\n  }\n\n  return result;\n};\n\nMarkdown.dialects.Maruku.block.definition_list = function definition_list( block, next ) {\n  // one or more terms followed by one or more definitions, in a single block\n  var tight = /^((?:[^\\s:].*\\n)+):\\s+([\\s\\S]+)$/,\n      list = [ \"dl\" ],\n      i, m;\n\n  // see if we're dealing with a tight or loose block\n  if ( ( m = block.match( tight ) ) ) {\n    // pull subsequent tight DL blocks out of `next`\n    var blocks = [ block ];\n    while ( next.length && tight.exec( next[ 0 ] ) ) {\n      blocks.push( next.shift() );\n    }\n\n    for ( var b = 0; b < blocks.length; ++b ) {\n      var m = blocks[ b ].match( tight ),\n          terms = m[ 1 ].replace( /\\n$/, \"\" ).split( /\\n/ ),\n          defns = m[ 2 ].split( /\\n:\\s+/ );\n\n      // print( uneval( m ) );\n\n      for ( i = 0; i < terms.length; ++i ) {\n        list.push( [ \"dt\", terms[ i ] ] );\n      }\n\n      for ( i = 0; i < defns.length; ++i ) {\n        // run inline processing over the definition\n        list.push( [ \"dd\" ].concat( this.processInline( defns[ i ].replace( /(\\n)\\s+/, \"$1\" ) ) ) );\n      }\n    }\n  }\n  else {\n    return undefined;\n  }\n\n  return [ list ];\n};\n\n// splits on unescaped instances of @ch. If @ch is not a character the result\n// can be unpredictable\n\nMarkdown.dialects.Maruku.block.table = function table (block, next) {\n\n    var _split_on_unescaped = function(s, ch) {\n        ch = ch || '\\\\s';\n        if (ch.match(/^[\\\\|\\[\\]{}?*.+^$]$/)) { ch = '\\\\' + ch; }\n        var res = [ ],\n            r = new RegExp('^((?:\\\\\\\\.|[^\\\\\\\\' + ch + '])*)' + ch + '(.*)'),\n            m;\n        while(m = s.match(r)) {\n            res.push(m[1]);\n            s = m[2];\n        }\n        res.push(s);\n        return res;\n    }\n\n    var leading_pipe = /^ {0,3}\\|(.+)\\n {0,3}\\|\\s*([\\-:]+[\\-| :]*)\\n((?:\\s*\\|.*(?:\\n|$))*)(?=\\n|$)/,\n        // find at least an unescaped pipe in each line\n        no_leading_pipe = /^ {0,3}(\\S(?:\\\\.|[^\\\\|])*\\|.*)\\n {0,3}([\\-:]+\\s*\\|[\\-| :]*)\\n((?:(?:\\\\.|[^\\\\|])*\\|.*(?:\\n|$))*)(?=\\n|$)/,\n        i, m;\n    if (m = block.match(leading_pipe)) {\n        // remove leading pipes in contents\n        // (header and horizontal rule already have the leading pipe left out)\n        m[3] = m[3].replace(/^\\s*\\|/gm, '');\n    } else if (! ( m = block.match(no_leading_pipe))) {\n        return undefined;\n    }\n\n    var table = [ \"table\", [ \"thead\", [ \"tr\" ] ], [ \"tbody\" ] ];\n\n    // remove trailing pipes, then split on pipes\n    // (no escaped pipes are allowed in horizontal rule)\n    m[2] = m[2].replace(/\\|\\s*$/, '').split('|');\n\n    // process alignment\n    var html_attrs = [ ];\n    forEach (m[2], function (s) {\n        if (s.match(/^\\s*-+:\\s*$/))       html_attrs.push({align: \"right\"});\n        else if (s.match(/^\\s*:-+\\s*$/))  html_attrs.push({align: \"left\"});\n        else if (s.match(/^\\s*:-+:\\s*$/)) html_attrs.push({align: \"center\"});\n        else                              html_attrs.push({});\n    });\n\n    // now for the header, avoid escaped pipes\n    m[1] = _split_on_unescaped(m[1].replace(/\\|\\s*$/, ''), '|');\n    for (i = 0; i < m[1].length; i++) {\n        table[1][1].push(['th', html_attrs[i] || {}].concat(\n            this.processInline(m[1][i].trim())));\n    }\n\n    // now for body contents\n    forEach (m[3].replace(/\\|\\s*$/mg, '').split('\\n'), function (row) {\n        var html_row = ['tr'];\n        row = _split_on_unescaped(row, '|');\n        for (i = 0; i < row.length; i++) {\n            html_row.push(['td', html_attrs[i] || {}].concat(this.processInline(row[i].trim())));\n        }\n        table[2].push(html_row);\n    }, this);\n\n    return [table];\n}\n\nMarkdown.dialects.Maruku.inline[ \"{:\" ] = function inline_meta( text, matches, out ) {\n  if ( !out.length ) {\n    return [ 2, \"{:\" ];\n  }\n\n  // get the preceeding element\n  var before = out[ out.length - 1 ];\n\n  if ( typeof before === \"string\" ) {\n    return [ 2, \"{:\" ];\n  }\n\n  // match a meta hash\n  var m = text.match( /^\\{:\\s*((?:\\\\\\}|[^\\}])*)\\s*\\}/ );\n\n  // no match, false alarm\n  if ( !m ) {\n    return [ 2, \"{:\" ];\n  }\n\n  // attach the attributes to the preceeding element\n  var meta = this.dialect.processMetaHash( m[ 1 ] ),\n      attr = extract_attr( before );\n\n  if ( !attr ) {\n    attr = {};\n    before.splice( 1, 0, attr );\n  }\n\n  for ( var k in meta ) {\n    attr[ k ] = meta[ k ];\n  }\n\n  // cut out the string and replace it with nothing\n  return [ m[ 0 ].length, \"\" ];\n};\n\nMarkdown.dialects.Maruku.inline.__escape__ = /^\\\\[\\\\`\\*_{}\\[\\]()#\\+.!\\-|:]/;\n\nMarkdown.buildBlockOrder ( Markdown.dialects.Maruku.block );\nMarkdown.buildInlinePatterns( Markdown.dialects.Maruku.inline );\n\nvar isArray = Array.isArray || function(obj) {\n  return Object.prototype.toString.call(obj) == \"[object Array]\";\n};\n\nvar forEach;\n// Don't mess with Array.prototype. Its not friendly\nif ( Array.prototype.forEach ) {\n  forEach = function( arr, cb, thisp ) {\n    return arr.forEach( cb, thisp );\n  };\n}\nelse {\n  forEach = function(arr, cb, thisp) {\n    for (var i = 0; i < arr.length; i++) {\n      cb.call(thisp || arr, arr[i], i, arr);\n    }\n  }\n}\n\nvar isEmpty = function( obj ) {\n  for ( var key in obj ) {\n    if ( hasOwnProperty.call( obj, key ) ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction extract_attr( jsonml ) {\n  return isArray(jsonml)\n      && jsonml.length > 1\n      && typeof jsonml[ 1 ] === \"object\"\n      && !( isArray(jsonml[ 1 ]) )\n      ? jsonml[ 1 ]\n      : undefined;\n}\n\n\n\n/**\n *  renderJsonML( jsonml[, options] ) -> String\n *  - jsonml (Array): JsonML array to render to XML\n *  - options (Object): options\n *\n *  Converts the given JsonML into well-formed XML.\n *\n *  The options currently understood are:\n *\n *  - root (Boolean): wether or not the root node should be included in the\n *    output, or just its children. The default `false` is to not include the\n *    root itself.\n */\nexpose.renderJsonML = function( jsonml, options ) {\n  options = options || {};\n  // include the root element in the rendered output?\n  options.root = options.root || false;\n\n  var content = [];\n\n  if ( options.root ) {\n    content.push( render_tree( jsonml ) );\n  }\n  else {\n    jsonml.shift(); // get rid of the tag\n    if ( jsonml.length && typeof jsonml[ 0 ] === \"object\" && !( jsonml[ 0 ] instanceof Array ) ) {\n      jsonml.shift(); // get rid of the attributes\n    }\n\n    while ( jsonml.length ) {\n      content.push( render_tree( jsonml.shift() ) );\n    }\n  }\n\n  return content.join( \"\\n\\n\" );\n};\n\nfunction escapeHTML( text ) {\n  return text.replace( /&/g, \"&amp;\" )\n             .replace( /</g, \"&lt;\" )\n             .replace( />/g, \"&gt;\" )\n             .replace( /\"/g, \"&quot;\" )\n             .replace( /'/g, \"&#39;\" );\n}\n\nfunction render_tree( jsonml ) {\n  // basic case\n  if ( typeof jsonml === \"string\" ) {\n    return escapeHTML( jsonml );\n  }\n\n  var tag = jsonml.shift(),\n      attributes = {},\n      content = [];\n\n  if ( jsonml.length && typeof jsonml[ 0 ] === \"object\" && !( jsonml[ 0 ] instanceof Array ) ) {\n    attributes = jsonml.shift();\n  }\n\n  while ( jsonml.length ) {\n    content.push( render_tree( jsonml.shift() ) );\n  }\n\n  var tag_attrs = \"\";\n  for ( var a in attributes ) {\n    tag_attrs += \" \" + a + '=\"' + escapeHTML( attributes[ a ] ) + '\"';\n  }\n\n  // be careful about adding whitespace here for inline elements\n  if ( tag == \"img\" || tag == \"br\" || tag == \"hr\" ) {\n    return \"<\"+ tag + tag_attrs + \"/>\";\n  }\n  else {\n    return \"<\"+ tag + tag_attrs + \">\" + content.join( \"\" ) + \"</\" + tag + \">\";\n  }\n}\n\nfunction convert_tree_to_html( tree, references, options ) {\n  var i;\n  options = options || {};\n\n  // shallow clone\n  var jsonml = tree.slice( 0 );\n\n  if ( typeof options.preprocessTreeNode === \"function\" ) {\n      jsonml = options.preprocessTreeNode(jsonml, references);\n  }\n\n  // Clone attributes if they exist\n  var attrs = extract_attr( jsonml );\n  if ( attrs ) {\n    jsonml[ 1 ] = {};\n    for ( i in attrs ) {\n      jsonml[ 1 ][ i ] = attrs[ i ];\n    }\n    attrs = jsonml[ 1 ];\n  }\n\n  // basic case\n  if ( typeof jsonml === \"string\" ) {\n    return jsonml;\n  }\n\n  // convert this node\n  switch ( jsonml[ 0 ] ) {\n    case \"header\":\n      jsonml[ 0 ] = \"h\" + jsonml[ 1 ].level;\n      delete jsonml[ 1 ].level;\n      break;\n    case \"bulletlist\":\n      jsonml[ 0 ] = \"ul\";\n      break;\n    case \"numberlist\":\n      jsonml[ 0 ] = \"ol\";\n      break;\n    case \"listitem\":\n      jsonml[ 0 ] = \"li\";\n      break;\n    case \"para\":\n      jsonml[ 0 ] = \"p\";\n      break;\n    case \"markdown\":\n      jsonml[ 0 ] = \"html\";\n      if ( attrs ) delete attrs.references;\n      break;\n    case \"code_block\":\n      jsonml[ 0 ] = \"pre\";\n      i = attrs ? 2 : 1;\n      var code = [ \"code\" ];\n      code.push.apply( code, jsonml.splice( i, jsonml.length - i ) );\n      jsonml[ i ] = code;\n      break;\n    case \"inlinecode\":\n      jsonml[ 0 ] = \"code\";\n      break;\n    case \"img\":\n      jsonml[ 1 ].src = jsonml[ 1 ].href;\n      delete jsonml[ 1 ].href;\n      break;\n    case \"linebreak\":\n      jsonml[ 0 ] = \"br\";\n    break;\n    case \"link\":\n      jsonml[ 0 ] = \"a\";\n      break;\n    case \"link_ref\":\n      jsonml[ 0 ] = \"a\";\n\n      // grab this ref and clean up the attribute node\n      var ref = references[ attrs.ref ];\n\n      // if the reference exists, make the link\n      if ( ref ) {\n        delete attrs.ref;\n\n        // add in the href and title, if present\n        attrs.href = ref.href;\n        if ( ref.title ) {\n          attrs.title = ref.title;\n        }\n\n        // get rid of the unneeded original text\n        delete attrs.original;\n      }\n      // the reference doesn't exist, so revert to plain text\n      else {\n        return attrs.original;\n      }\n      break;\n    case \"img_ref\":\n      jsonml[ 0 ] = \"img\";\n\n      // grab this ref and clean up the attribute node\n      var ref = references[ attrs.ref ];\n\n      // if the reference exists, make the link\n      if ( ref ) {\n        delete attrs.ref;\n\n        // add in the href and title, if present\n        attrs.src = ref.href;\n        if ( ref.title ) {\n          attrs.title = ref.title;\n        }\n\n        // get rid of the unneeded original text\n        delete attrs.original;\n      }\n      // the reference doesn't exist, so revert to plain text\n      else {\n        return attrs.original;\n      }\n      break;\n  }\n\n  // convert all the children\n  i = 1;\n\n  // deal with the attribute node, if it exists\n  if ( attrs ) {\n    // if there are keys, skip over it\n    for ( var key in jsonml[ 1 ] ) {\n        i = 2;\n        break;\n    }\n    // if there aren't, remove it\n    if ( i === 1 ) {\n      jsonml.splice( i, 1 );\n    }\n  }\n\n  for ( ; i < jsonml.length; ++i ) {\n    jsonml[ i ] = convert_tree_to_html( jsonml[ i ], references, options );\n  }\n\n  return jsonml;\n}\n\n\n// merges adjacent text nodes into a single node\nfunction merge_text_nodes( jsonml ) {\n  // skip the tag name and attribute hash\n  var i = extract_attr( jsonml ) ? 2 : 1;\n\n  while ( i < jsonml.length ) {\n    // if it's a string check the next item too\n    if ( typeof jsonml[ i ] === \"string\" ) {\n      if ( i + 1 < jsonml.length && typeof jsonml[ i + 1 ] === \"string\" ) {\n        // merge the second string into the first and remove it\n        jsonml[ i ] += jsonml.splice( i + 1, 1 )[ 0 ];\n      }\n      else {\n        ++i;\n      }\n    }\n    // if it's not a string recurse\n    else {\n      merge_text_nodes( jsonml[ i ] );\n      ++i;\n    }\n  }\n}\n\n} )( (function() {\n  if ( typeof exports === \"undefined\" ) {\n    window.markdown = {};\n    return window.markdown;\n  }\n  else {\n    return exports;\n  }\n} )() );\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/.0.5.0@markdown/lib/markdown.js\n// module id = 188\n// module chunks = 0 1 5 6","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/.2.0.1@inherits/inherits_browser.js\n// module id = 189\n// module chunks = 0 1 5 6","exports = module.exports = require(\"../../node_modules/.0.28.3@css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\", {\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"file\":\"about.vue\",\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/.0.28.3@css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/.12.1.0@vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-f9f28b26\",\"scoped\":false,\"hasInlineConfig\":false}!./~/.12.1.0@vue-loader/lib/selector.js?type=styles&index=0!./src/pages/about.vue\n// module id = 239\n// module chunks = 5","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    attrs: {\n      \"id\": \"container\"\n    }\n  }, [_c('main', {\n    attrs: {\n      \"id\": \"main\"\n    }\n  }, [_c('el-row', {\n    attrs: {\n      \"gutter\": 20\n    }\n  }, [_c('el-col', {\n    staticClass: \"cv cv-100\",\n    attrs: {\n      \"span\": 18,\n      \"id\": \"content\",\n      \"offset\": 3\n    }\n  }, [_c('div', {\n    staticClass: \"grid-content bg-purple\"\n  }, [_c('el-card', {\n    staticClass: \"box-card\"\n  }, [_c('header', {\n    staticClass: \"clearfix\",\n    attrs: {\n      \"id\": \"panel-header\"\n    },\n    slot: \"header\"\n  }, [_c('span', [_vm._v(\"关于\")])]), _vm._v(\" \"), _c('main', [(_vm.aboutContent) ? _c('section', {\n    staticClass: \"markdown-body\",\n    domProps: {\n      \"innerHTML\": _vm._s(_vm.aboutContent)\n    }\n  }) : _vm._e()])])], 1)])], 1)], 1)])\n},staticRenderFns: []}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/.12.1.0@vue-loader/lib/template-compiler?{\"id\":\"data-v-f9f28b26\"}!./~/.12.1.0@vue-loader/lib/selector.js?type=template&index=0!./src/pages/about.vue\n// module id = 250\n// module chunks = 5","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../node_modules/.0.28.3@css-loader/index.js?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../node_modules/.12.1.0@vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-f9f28b26\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../../node_modules/.12.1.0@vue-loader/lib/selector.js?type=styles&index=0!./about.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../../node_modules/.3.0.1@vue-style-loader/lib/addStylesClient.js\")(\"1c1f73f6\", content, true);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/.2.1.0@extract-text-webpack-plugin/loader.js?{\"omit\":1,\"remove\":true}!./~/.3.0.1@vue-style-loader!./~/.0.28.3@css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/.12.1.0@vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-f9f28b26\",\"scoped\":false,\"hasInlineConfig\":false}!./~/.12.1.0@vue-loader/lib/selector.js?type=styles&index=0!./src/pages/about.vue\n// module id = 259\n// module chunks = 5","<template lang=\"html\">\r\n    <div id=\"container\">\r\n        <main id=\"main\">\r\n            <el-row :gutter=\"20\">\r\n                <el-col :span=\"18\" id=\"content\" :offset=\"3\" class=\"cv cv-100\">\r\n                    <div class=\"grid-content bg-purple\">\r\n                        <el-card class=\"box-card\">\r\n                            <header slot=\"header\" class=\"clearfix\" id=\"panel-header\">\r\n                                <span>关于</span>\r\n                            </header>\r\n                            <main>\r\n                                <section class=\"markdown-body\" v-if=\"aboutContent\" v-html=\"aboutContent\">\r\n                                </section>\r\n                            </main>\r\n                        </el-card>\r\n                    </div>\r\n                </el-col>\r\n              </el-row>\r\n        </main>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport cvHead from \"../components/header.vue\";\r\nimport Markdown from \"markdown\";\r\nimport aboutmd from \"../assets/about.md\";\r\n\r\nconst markdown = Markdown.markdown;\r\n\r\nexport default {\r\n    data() {\r\n        return {\r\n            aboutContent: \"\"\r\n        }\r\n    },\r\n    computed: {},\r\n    created() {\r\n        this.fetchAboutPage();\r\n    },\r\n    mounted() { },\r\n    methods: {\r\n        fetchAboutPage() {\r\n            this.setLoading(true);\r\n            let self = this;\r\n            $.get(aboutmd)\r\n                .done(res => {\r\n                    this.setLoading(false);\r\n                    if (!res) {\r\n                        //TODO 错误抛出\r\n                        return;\r\n                    }\r\n                    let html = markdown.toHTML(res);\r\n                    self.aboutContent = html;\r\n                })\r\n                .fail(error => {\r\n                    //TODO 错误抛出\r\n                    this.setLoading(false);\r\n                })\r\n        },\r\n        setLoading(state) {\r\n            this.$store.commit(\"setLoading\", state);\r\n        }\r\n    },\r\n    components: {\r\n        cvHead\r\n    }\r\n}\r\n</script>\r\n\r\n<style lang=\"css\">\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// about.vue?caa79c72"],"sourceRoot":""}